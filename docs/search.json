[{"path":"https://nicholasdavies.github.io/luajr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Mike Pall, Lua.org, PUC-Rio, Nicholas Davies, Scott Lembcke, Howling Moon Software Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"vector-types","dir":"Articles","previous_headings":"","what":"Vector types","title":"Interface with R from Lua","text":"vector types modelled C++’s std::vector class. vector type end pass argument Lua function using lua_func() arg code \"v\", can also create new vectors within Lua. Like C++ counterparts, vector types maintain internal “capacity” equal greater “length”, actual number elements. exception character vector, implemented internally Lua table interface vector types. Note vector types, indexes start 1, 0. must careful access write bounds, luajr module bounds checking. Going bounds cause crashes undefined behaviour. Unlike Lua tables, vector types can indexed integers 1 vector length, strings types.","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"vcreate","dir":"Articles","previous_headings":"Vector types","what":"Creating and testing vector types","title":"Interface with R from Lua","text":"luajr.logical(, b), luajr.integer(, b), luajr.numeric(, b), luajr.character(, b) functions can used create “vector types” Lua code. meaning b depends type. example: , n nonnegative number, x boolean, number, string (appropriate vector type) nil, v another vector object type, z table, vector type, reference type. x == nil (n, x) form functions, values vector left uninitialized (except luajr.character, values set empty string). luajr.is_logical(obj), luajr.is_integer(obj), luajr.is_numeric(obj), luajr.is_character(obj) Check whether value obj one corresponding vector types. return true obj corresponding type, false otherwise.","code":"luajr.numeric()     -- Empty numeric vector luajr.numeric(n, x) -- Size-n numeric vector, all entries equal to x luajr.numeric(v)    -- Copied from vector v luajr.numeric(z)    -- Copied from \"vector-ish\" object z"},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"vector-type-methods","dir":"Articles","previous_headings":"Vector types","what":"Vector type methods","title":"Interface with R from Lua","text":"vector types following methods: #v Returns length vector. x = v[], v[] = x Get set ith element vector. : Note vector types, indexes start 1, 0. must careful access write bounds, luajr module bounds checking. Going bounds cause crashes undefined behaviour. Unlike Lua tables, vector types can indexed integers 1 vector length, strings types. pairs(v), ipairs(v) Use Lua loop iterate values vector. example: Note vector types, pairs ipairs interchangeable loop can written v:assign(, b) Assign new value vector; b meaning vector type constructors. v:print() Print value vector next index, value new line. v:concat(sep) Returns string comprised elements vector converted strings concatenated together sep separator. sep missing, default \",\". v:debug_str() Returns compact string representation vector, useful mainly debugging. contains length vector, capacity vector, vector elements separated commas. v:reserve(n) n larger vector’s current capacity, suggests vector enlarged capacity n. Otherwise, nothing. v:capacity() Returns capacity vector. v:shrink_to_fit() vector’s capacity larger length, reallocates vector capacity equal length. v:clear() Sets size vector 0. v:resize(n, val) Sets size vector n. n smaller vector’s current length, removes elements end vector. n larger vector’s current length, adds new elements end equal val. val can nil missing. v:push_back(val) Adds val end vector. v:pop_back() Removes one element end vector. v:insert(, , b) Inserts new elements position , must 1 #v + 1. b meaning vector type constructors. v:erase(first, last) Removes elements position first position last, inclusive (e.g. v:erase(1, #v) erases whole vector). last nil missing, just erases single element position first.","code":"for i,x in pairs(v) do     print(i, x) end for i = 1, #v do     print(i, v[i]) end"},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"reference-types","dir":"Articles","previous_headings":"","what":"Reference types","title":"Interface with R from Lua","text":"reference types similar vector types, “low-level” hence missing much functionality vector types. map directly onto memory managed R, judicious use reference types passing returning Lua can avoid unnecessary memory allocations copies. Although reference types missing lots methods vector types , one feature vector types don’t , namely can set get attributes associated underlying R value. reference type end pass argument Lua function using lua_func() arg code \"r\", can also create new reference types within Lua. vector types, indexes start 1, 0, must careful access write bounds. Finally, reference types depend upon R, completely thread safe therefore safely used lua_parallel().","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"creating-and-testing-reference-types","dir":"Articles","previous_headings":"Reference types","what":"Creating and testing reference types","title":"Interface with R from Lua","text":"luajr.logical_r(, b), luajr.integer_r(, b), luajr.numeric_r(, b), luajr.character_r(, b) functions can used create “vector types” Lua code. meaning b depends type. Namely: , n nonnegative number, x boolean, number, string (appropriate vector type) nil, z table, vector type, reference type. luajr.is_logical_r(obj), luajr.is_integer_r(obj), luajr.is_numeric_r(obj), luajr.is_character_r(obj) Check whether value obj one corresponding reference types. return true obj corresponding type, false otherwise.","code":"luajr.numeric_r(n, x) -- Size n, all entries equal to x if x ~= nil luajr.numeric_r(z)    -- Copied from \"vector-ish\" object z"},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"reference-type-methods","dir":"Articles","previous_headings":"Reference types","what":"Reference type methods","title":"Interface with R from Lua","text":"reference types following methods: #v Returns length referenced vector. x = v[], v[] = x Get set ith element referenced vector. pairs(v), ipairs(v) Use Lua loop iterate values vector. x = v(attr), v(attr, x) Get set attribute named attr. second form, two arguments, sets attribute x. Note even though can get manipulate names attribute, access reference vector’s elements names.","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"list-type","dir":"Articles","previous_headings":"","what":"List type","title":"Interface with R from Lua","text":"list special kind Lua table can indexed either positive integers strings. Unlike Lua table, list remembers order added elements , like R list .","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"creating-and-testing-lists","dir":"Articles","previous_headings":"List type","what":"Creating and testing lists","title":"Interface with R from Lua","text":"luajr.list() Creates new, empty list. luajr.is_list(obj) Check whether value obj list. Returns true obj list, false otherwise.","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"list-methods","dir":"Articles","previous_headings":"List type","what":"List methods","title":"Interface with R from Lua","text":"Lists following methods: #v Returns length list, including integer- string-keyed entries. differs behaviour # operator normal Lua tables, report number integer-keyed entries. x = v[], v[] = x Get set element list. can either positive integer string. Note write integer keys greater #v + 1. pairs(v), ipairs(v) Use Lua loop iterate values vector. Unlike vector reference types, pairs ipairs exactly applied lists; former provide either string number keys iterate list (strings present, numbers otherwise) latter give number keys . Either one iterates every element list iterate list order. x = v(attr), v(attr, x) Get set attribute named attr. second form, two arguments, sets attribute x. Note , list, \"names\" attribute simple vector names, like R, associative array linking keys indices. example, list elements = 1, 2, c = 3, v(\"names\") equal { \"\" = 1, \"c\" = 3 }. However, list returned R, \"names\" attribute normal R format. Note lists interface setting getting attributes, unlike reference types (also capability), internally managed R. means safe use lua_parallel(), long don’t contain reference types.","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"data-frame-and-matrix-types","dir":"Articles","previous_headings":"","what":"Data frame and matrix types","title":"Interface with R from Lua","text":"handful additional types based types, special behaviour returned R.","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"data-frame","dir":"Articles","previous_headings":"Data frame and matrix types","what":"Data frame","title":"Interface with R from Lua","text":"data frame can created just luajr.list \"class\" attribute set \"data.frame\". However, list class gets returned R, gets turned data frame.","code":"df = luajr.dataframe()"},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"matrix","dir":"Articles","previous_headings":"Data frame and matrix types","what":"Matrix","title":"Interface with R from Lua","text":"matrix can created special kind luajr.numeric_r \"dim\" attribute set luajr.integer_r({ nrow, ncol }). gets recognized matrix returned R. However, can access elements single index starts 1 goes column-major order. , example, 2x2 matrix, top-left element index 1, bottom-left index 2, top-right index 3 bottom-right index 4. Note reference type.","code":"df = luajr.matrix_r(nrow, ncol)"},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"data-matrix","dir":"Articles","previous_headings":"Data frame and matrix types","what":"Data matrix","title":"Interface with R from Lua","text":"data matrix can created similar luajr.matrix_r, names column names. names can passed Lua table (e.g. { \"foo\", \"bar\" }) luajr.character luajr.character_r object. Using data matrix slightly faster using data frame one memory allocation needs made, difference order microseconds normal sized data. Also, just going convert returned matrix data frame anyway, lose speed advantage. don’t worry much. column names can get set within Lua using special attribute name \"/matrix/colnames\".","code":"dm = luajr.datamatrix_r(nrow, ncol, names)"},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"constants","dir":"Articles","previous_headings":"","what":"Constants","title":"Interface with R from Lua","text":"following constants defined luajr table: Note Lua’s semantics dealing logical types NA values different R’s semantics. Lua “understand” NA values way R , sees R logical type fundamentally integer, boolean. Specifically, whereas R following: Lua : hood, R’s TRUE defined integer 1 (though nonzero integer besides NA also test TRUE), FALSE defined 0, NA (logical integer) defined special ‘flag’ value -2147483648 (.e. -2^31). However, Lua, anything nil false evaluates true, meaning following Lua code incorrectly claim luajr.TRUE, luajr.FALSE, luajr.NA_logical_ “TRUE”. , instead, explicitly set logical values either luajr.TRUE, luajr.FALSE, luajr.NA_logical_, explicitly test values. Note different NA constants interchangeable. , testing NA Lua, check value equal (==) equal (~=) corresponding NA constant , depending type variable question. applies vector reference types described . Lua also boolean type (possible values true false) never compare equal either luajr.TRUE, luajr.FALSE NA values. Lua string can never compare equal luajr.NA_character_, conversely Lua number may sometimes compare equal luajr.NA_logical_, luajr.NA_integer_, luajr.NA_real_, careful mix Lua types R constants. Finally, luajr.NULL can used represent NULL value, either part table luajr.list gets returned R. pass NULL Lua arg code \"s\", come nil Lua; use arg code \"r\" \"v\", come luajr.NULL.","code":"luajr.TRUE luajr.FALSE luajr.NA_logical_ luajr.NA_integer_ luajr.NA_real_ luajr.NA_character_ luajr.NULL x = c(TRUE, FALSE, NA) if (x[1]) print(\"First element of x is TRUE!\") x = luajr.logical({ luajr.TRUE, luajr.FALSE, luajr.NA_logical_ }) if x[1] == luajr.TRUE then print(\"First element of x is TRUE!\") end x = luajr.logical({ luajr.TRUE, luajr.FALSE, luajr.NA_logical_ }) for i = 1, #x do     if x[i] then print(\"Element\", i, \"of x is TRUE!\") end end"},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr.html","id":"running-lua-code-lua-and-lua_shell","dir":"Articles","previous_headings":"","what":"Running Lua code: lua() and lua_shell()","title":"Introduction to `luajr`","text":"get feel luajr run “one-” Lua code R project, use lua() lua_shell(). pass character string lua(), run Lua code: Assignments global variables persist calls lua(): luajr maintains “default Lua state” holds global variables. default Lua state opened first time package function used. can create , separate Lua states, reset default Lua state (see Lua states, ). Assignments local variables persist calls lua(): case, second line returns \"walrus\" local variable my_animal goes scope first call lua() ends, second call lua() referring back global variable my_animal . can include one statement code run lua(): can also use filename argument lua() load run Lua source file, instead running contents string. Call lua_shell() open interactive Lua shell R prompt. can can helpful debugging testing Lua statements.","code":"library(luajr) lua(\"return 'Hello ' .. 'world!'\") #> [1] \"Hello world!\" lua(\"my_animal = 'walrus'\") lua(\"return my_animal\") #> [1] \"walrus\" lua(\"local my_animal = 'donkey'\") lua(\"return my_animal\") #> [1] \"walrus\" lua(\"local my_veg = 'potato'; local my_dish = my_veg .. ' pie'; return my_dish\") #> [1] \"potato pie\""},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr.html","id":"calling-lua-functions-from-r-lua_func","dir":"Articles","previous_headings":"","what":"Calling Lua functions from R: lua_func()","title":"Introduction to `luajr`","text":"key piece functionality luajr probably lua_func(). allows call Lua functions R. first argument lua_func(), func, string evaluate Lua function. lua_func() returns R function can used call Lua function R. example, can use lua_func() access existing Lua function R: , \"type\" just referring built-Lua function type returns string describing Lua type value passed . can also use lua_func() refer previously defined function default Lua state: can use lua_func() define anonymous Lua function: hood, lua_func() just takes first parameter (string), adds \"return \" front , executes Lua code, registers result function. second argument lua_func(), argcode, also important. argcode determines arguments passed function R translated Lua values use inside function. permissible arg codes : 's': simplest Lua type (default) '': array type '1': 's', require argument length 1 … '9': 's', require argument length 9 'v': pass value 'r': pass reference kinds R values can passed Lua functions, behaviour different arg codes, summarized following table: , nn stands integer greater 1; examples, stands specifically 2. one character argcode every argument function, string “recycled” arguments passed characters argcode string. , example, just passing \"s\" argcode means parameters passed simplest Lua type, argcode \"sr\", first argument arg code \"s\", second argument arg code \"r\", third argument arg code \"s\", etc. vector (logical vector, integer vector, numeric vector, character vector) passed R Lua reference, modifications made elements passed-vector persist back R calling frame. example: Vectors can never resized reference; already-existing elements can changed reference. Lists always passed value, vector elements can either passed value reference depending arg code. order make changes list, needs returned calling function. example: Note examples , modify x[1][1], just x[1]. , even lists passed reference, need modify specific elements vector elements want make changes reference. Setting x[1] = 999 reassign element list x, lists passed reference , effect R object passed . contrast, setting x[1][1] = 999 modifies passed-vector x[1], can passed reference, change R object passed . modify list, return new value function: , returning modified value, can add elements list (f3) change whole entries list (f4).","code":"luatype = lua_func(\"type\") luatype(TRUE) #> [1] \"boolean\" lua(\"function squared(x) return x^2 end\") lua(\"return squared(4)\") #> [1] 16  sq = lua_func(\"squared\") sq(8) #> [1] 64 timestwo = lua_func(\"function(x) return x*2 end\") timestwo(123) #> [1] 246 values = c(1.0, 2.0, 3.0) keep = lua_func(\"function(x) x[1] = 999 end\", \"v\") # passed by value keep(values) print(values) #> [1] 1 2 3  change = lua_func(\"function(x) x[1] = 999 end\", \"r\") # passed by reference change(values) print(values) #> [1] 999   2   3 x = list(1)  f1 = lua_func(\"function(x) x[1][1] = 999; x.a = 42; end\", \"v\") f1(x) print(x) #> [[1]] #> [1] 1  f2 = lua_func(\"function(x) x[1][1] = 999; x.a = 42; end\", \"r\") f2(x) print(x) #> [[1]] #> [1] 999 x = list(1)  f3 = lua_func(\"function(x) x[1][1] = 999; x.a = 42; return x; end\", \"v\") x = f3(x) print(x) #> [[1]] #> [1] 999 #>  #> $a #> [1] 42  f4 = lua_func(\"function(x) x[1] = luajr.numeric({888, 999}); return x; end\", \"v\") x = f4(x) print(x) #> [[1]] #> [1] 888 999 #>  #> $a #> [1] 42"},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr.html","id":"benchmarking","dir":"Articles","previous_headings":"","what":"Benchmarking","title":"Introduction to `luajr`","text":"way using R packages cpp11 Rcpp allows bridge R code C++ code runs faster R, can use luajr bridge R code Lua code runs faster R. general, C/C++ code runs 5-1,000 times faster equivalent R code. experience, luajr code often presents similar speedup, C/C++ code, worst case, maybe half fast. Sometimes luajr code can faster C/C++, though usually isn’t quite good. use luajr ? Rcpp cpp11 require C++ toolchain (e.g.  gcc, clang, etc.) requires long compilation times, whereas luajr doesn’t. means luajr usable C++ compiler isn’t available, compilation times prohibitive annoyance. following section, look two aspects benchmarking. first example, compare different ways passing vectors Lua functions relative R. second example, compare fundamentally difference running whole algorithm Lua versus R versus C++ Rcpp.","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr.html","id":"parameter-passing-example-sum-of-squares","dir":"Articles","previous_headings":"Benchmarking","what":"Parameter passing example: sum of squares","title":"Introduction to `luajr`","text":"reasonably long vectors, passing reference ('r') faster passing value ('v'), faster passing simplify ('s', '', '1'–'9'). relatively short vectors, passing simplify can avoid overhead, simple operations short vectors, might worth using Lua . illustrate points, code takes numeric vector calculates sum squares, comparing pure R function three alternatives written Lua, respectively passing vector reference, value, simplify. time taken sum v1, v4 v7, depending upon function kind, 2019-era MacBook Pro summarised table: vector 10 elements long, R version wins handily. vector 10,000 elements long, pass--reference Lua version fastest, methods comparable. vector 10,000,000 elements long, story similar. example luajr doesn’t add much speed—function relatively short, certain amount overhead invoking , R function doesn’t overhead transferring control languages.","code":"v1 = rnorm(1e1) v4 = rnorm(1e4) v7 = rnorm(1e7)  lua(\"sum2 = function(x) local s = 0; for i=1,#x do s = s + x[i]*x[i] end; return s end\") sum2 = function(x) sum(x*x) sum2_r = lua_func(\"sum2\", \"r\") sum2_v = lua_func(\"sum2\", \"v\") sum2_s = lua_func(\"sum2\", \"s\")  # Comparing the results of each function: sum2(v1)    # Pure R version #> [1] 13.19052 sum2_r(v1)  # luajr pass-by-reference #> [1] 13.19052 sum2_v(v1)  # luajr pass-by-value #> [1] 13.19052 sum2_s(v1)  # luajr pass-by-simplify #> [1] 13.19052"},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr.html","id":"processing-time-example-logistic-map","dir":"Articles","previous_headings":"Benchmarking","what":"Processing time example: logistic map","title":"Introduction to `luajr`","text":"Consider following: comparing three different versions (R, Lua, C++) running parameter sweep logistic map, chaotic dynamical system popularized Bob May 1976 Nature article. output looks like :  code , don’t actually compile C++ code using Rcpp, declare source code illustration. don’t actually compile code article didn’t want luajr depend Rcpp sake vignette, using Rcpp::cppFunction(logistic_map_C). times taken function 2025-era MacBook Pro follows: version written Lua around 10 times faster version R, even somewhat outperforms Rcpp. Note relative speed Lua versus C++ depends number iterations, whether use Rcpp cpp11, seem marginal advantages different cases. Nonetheless, Lua version seems execute quickly C++ version, within plus minus 20%. speedup Lua function relative R much notable earlier test R version first created data frame performed iteration, .e. line result$x[j] = x instead result_x[j] = x. median runtime R version two orders magnitude slower Lua version; extra overhead associated data.frame methods pointed Tim Taylor.","code":"logistic_map_R = function(x0, burn, iter, A) {     result_x = numeric(length(A) * iter)          j = 1     for (a in A) {         x = x0         for (i in 1:burn) {              x = a * x * (1 - x)         }         for (i in 1:iter) {              result_x[j] = x             x = a * x * (1 - x)             j = j + 1         }     }          return (list2DF(list(a = rep(A, each = iter), x = result_x))) }  logistic_map_L = lua_func( \"function(x0, burn, iter, A)     local dflen = #A * iter     local result = luajr.dataframe()     result.a = luajr.numeric_r(dflen, 0)     result.x = luajr.numeric_r(dflen, 0)          local j = 1     for k,a in pairs(A) do         local x = x0         for i = 1, burn do             x = a * x * (1 - x)         end         for i = 1, iter do             result.a[j] = a             result.x[j] = x             x = a * x * (1 - x)             j = j + 1         end     end          return result end\", \"sssr\")  # To be compiled using Rcpp::cppFunction() logistic_map_C = 'DataFrame logistic_map(double x0, unsigned int burn, unsigned int iter, NumericVector A) {     unsigned int dflen = A.length() * iter;     NumericVector da(dflen, 0);     NumericVector dx(dflen, 0);          unsigned int j = 0;     for (auto a : A)     {         double x = x0;         for (unsigned int i = 0; i < burn; ++i)             x = a * x * (1 - x);         for (unsigned int i = 0; i < iter; ++i, ++j)         {             dx[j] = x;             da[j] = a;             x = a * x * (1 - x);         }     }      return DataFrame::create(Named(\"a\") = da, Named(\"x\") = dx); }' logistic_map = logistic_map_L(0.5, 100, 100, 200:385/100) plot(logistic_map$a, logistic_map$x, pch = \".\")"},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr.html","id":"states","dir":"Articles","previous_headings":"","what":"Working with Lua States: lua_open(), lua_reset()","title":"Introduction to `luajr`","text":"functions mentioned (lua(), lua_shell(), lua_func()) can also take argument L specifies particular Lua state function operates . L = NULL (default) functions operate default Lua state. can also open alternative Lua states using lua_open(), passing result parameter L, specify function operates specific state. example: lua_close luajr Lua states closed automatically garbage collected R. lua_reset() resets default Lua state: reset non-default Lua state L returned lua_open(), just L = lua_open() . memory previously used L cleaned next garbage collection.","code":"L1 = lua_open() lua(\"a = 2\") lua(\"a = 4\", L = L1) lua(\"return a\") #> [1] 2 lua(\"return a\", L = L1) #> [1] 4 lua(\"a = 2\") lua(\"return a\") #> [1] 2 lua_reset() lua(\"return a\") #> NULL"},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"Introduction to `luajr`","text":"notes create manipulate R objects – vectors, lists, data.frames – Lua code, see R objects Lua code vignette.","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/objects.html","id":"the-luajr-lua-module","dir":"Articles","previous_headings":"","what":"The luajr Lua module","title":"R objects in Lua code","text":"Whenever luajr R package opens new Lua state, opens standard Lua libraries state, well luajr Lua module. luajr module provides key capabilities Lua code interface well R code, particularly around passing R objects Lua code. vignette documents capabilities luajr module. Specifically, vignette describes: Vector types, can represent basic R logical vectors, integer vectors, numeric vectors, character vectors, passed Lua code value. words, pass vector value Lua, alter contents Lua code, affect vector R (works pass vector R function). Reference types, another way working basic R logical vectors, integer vectors, numeric vectors, character vectors, passed Lua code reference. words, pass vector reference Lua, alter contents Lua code, changes reflected directly R object passed . List type, allow work R lists Lua. Data frame matrix types, simplify working R data.frame matrix types. Certain constants defined luajr module.","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/objects.html","id":"vector","dir":"Articles","previous_headings":"","what":"Vector types","title":"R objects in Lua code","text":"vector types modelled C++’s std::vector class. vector type end pass argument Lua function using lua_func() arg code \"v\", can also create new vectors within Lua. Like C++ counterparts, vector types maintain internal “capacity” equal greater “length”, actual number elements. exception character vector, implemented internally Lua table interface vector types. Note vector types, indexes start 1, 0. must careful access write bounds, luajr module bounds checking. Going bounds cause crashes undefined behaviour. Unlike Lua tables, vector types can indexed integers 1 vector length, strings types.","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/objects.html","id":"vcreate","dir":"Articles","previous_headings":"Vector types","what":"Creating and testing vector types","title":"R objects in Lua code","text":"luajr.logical(, b), luajr.integer(, b), luajr.numeric(, b), luajr.character(, b) functions can used create “vector types” Lua code. meaning b depends type. example: , n nonnegative number, x boolean, number, string (appropriate vector type) nil, v another vector object type, z table, vector type, reference type. x == nil (n, x) form functions, values vector left uninitialized (except luajr.character, values set empty string). luajr.is_logical(obj), luajr.is_integer(obj), luajr.is_numeric(obj), luajr.is_character(obj) Check whether value obj one corresponding vector types. return true obj corresponding type, false otherwise.","code":"luajr.numeric()     -- Empty numeric vector luajr.numeric(n, x) -- Size-n numeric vector, all entries equal to x luajr.numeric(v)    -- Copied from vector v luajr.numeric(z)    -- Copied from \"vector-ish\" object z"},{"path":"https://nicholasdavies.github.io/luajr/articles/objects.html","id":"vector-type-methods","dir":"Articles","previous_headings":"Vector types","what":"Vector type methods","title":"R objects in Lua code","text":"vector types following methods: #v Returns length vector. x = v[], v[] = x Get set ith element vector. : Note vector types, indexes start 1, 0. must careful access write bounds, luajr module bounds checking. Going bounds cause crashes undefined behaviour. Unlike Lua tables, vector types can indexed integers 1 vector length, strings types. pairs(v), ipairs(v) Use Lua loop iterate values vector. example: Note vector types, pairs ipairs interchangeable loop can written v:assign(, b) Assign new value vector; b meaning vector type constructors. v:print() Print value vector next index, value new line. v:concat(sep) Returns string comprised elements vector converted strings concatenated together sep separator. sep missing, default \",\". v:debug_str() Returns compact string representation vector, useful mainly debugging. contains length vector, capacity vector, vector elements separated commas. v:reserve(n) n larger vector’s current capacity, suggests vector enlarged capacity n. Otherwise, nothing. v:capacity() Returns capacity vector. v:shrink_to_fit() vector’s capacity larger length, reallocates vector capacity equal length. v:clear() Sets size vector 0. v:resize(n, val) Sets size vector n. n smaller vector’s current length, removes elements end vector. n larger vector’s current length, adds new elements end equal val. val can nil missing. v:push_back(val) Adds val end vector. v:pop_back() Removes one element end vector. v:insert(, , b) Inserts new elements position , must 1 #v + 1. b meaning vector type constructors. v:erase(first, last) Removes elements position first position last, inclusive (e.g. v:erase(1, #v) erases whole vector). last nil missing, just erases single element position first.","code":"for i,x in pairs(v) do     print(i, x) end for i = 1, #v do     print(i, v[i]) end"},{"path":"https://nicholasdavies.github.io/luajr/articles/objects.html","id":"reference","dir":"Articles","previous_headings":"","what":"Reference types","title":"R objects in Lua code","text":"reference types similar vector types, “low-level” hence missing much functionality vector types. map directly onto memory managed R, judicious use reference types passing returning Lua can avoid unnecessary memory allocations copies. Although reference types missing lots methods vector types , one feature vector types don’t , namely can set get attributes associated underlying R value. reference type end pass argument Lua function using lua_func() arg code \"r\", can also create new reference types within Lua. vector types, indexes start 1, 0, must careful access write bounds. Finally, reference types depend upon R, completely thread safe therefore safely used lua_parallel().","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/objects.html","id":"creating-and-testing-reference-types","dir":"Articles","previous_headings":"Reference types","what":"Creating and testing reference types","title":"R objects in Lua code","text":"luajr.logical_r(, b), luajr.integer_r(, b), luajr.numeric_r(, b), luajr.character_r(, b) functions can used create “vector types” Lua code. meaning b depends type. Namely: , n nonnegative number, x boolean, number, string (appropriate vector type) nil, z table, vector type, reference type. luajr.is_logical_r(obj), luajr.is_integer_r(obj), luajr.is_numeric_r(obj), luajr.is_character_r(obj) Check whether value obj one corresponding reference types. return true obj corresponding type, false otherwise.","code":"luajr.numeric_r(n, x) -- Size n, all entries equal to x if x ~= nil luajr.numeric_r(z)    -- Copied from \"vector-ish\" object z"},{"path":"https://nicholasdavies.github.io/luajr/articles/objects.html","id":"reference-type-methods","dir":"Articles","previous_headings":"Reference types","what":"Reference type methods","title":"R objects in Lua code","text":"reference types following methods: #v Returns length referenced vector. x = v[], v[] = x Get set ith element referenced vector. pairs(v), ipairs(v) Use Lua loop iterate values vector. x = v(attr), v(attr, x) Get set attribute named attr. second form, two arguments, sets attribute x. Note even though can get manipulate names attribute, access reference vector’s elements names.","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/objects.html","id":"list","dir":"Articles","previous_headings":"","what":"List type","title":"R objects in Lua code","text":"list special kind Lua table can indexed either positive integers strings. Unlike Lua table, list remembers order added elements , like R list .","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/objects.html","id":"creating-and-testing-lists","dir":"Articles","previous_headings":"List type","what":"Creating and testing lists","title":"R objects in Lua code","text":"luajr.list() Creates new, empty list. luajr.is_list(obj) Check whether value obj list. Returns true obj list, false otherwise.","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/objects.html","id":"list-methods","dir":"Articles","previous_headings":"List type","what":"List methods","title":"R objects in Lua code","text":"Lists following methods: #v Returns length list, including integer- string-keyed entries. differs behaviour # operator normal Lua tables, report number integer-keyed entries. x = v[], v[] = x Get set element list. can either positive integer string. Note write integer keys greater #v + 1. pairs(v), ipairs(v) Use Lua loop iterate values vector. Unlike vector reference types, pairs ipairs exactly applied lists; former provide either string number keys iterate list (strings present, numbers otherwise) latter give number keys . Either one iterates every element list iterate list order. x = v(attr), v(attr, x) Get set attribute named attr. second form, two arguments, sets attribute x. Note , list, \"names\" attribute simple vector names, like R, associative array linking keys indices. example, list elements = 1, 2, c = 3, v(\"names\") equal { \"\" = 1, \"c\" = 3 }. However, list returned R, \"names\" attribute normal R format. Note lists interface setting getting attributes, unlike reference types (also capability), internally managed R. means safe use lua_parallel(), long don’t contain reference types.","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/objects.html","id":"dfm","dir":"Articles","previous_headings":"","what":"Data frame and matrix types","title":"R objects in Lua code","text":"handful additional types based types, special behaviour returned R.","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/objects.html","id":"data-frame","dir":"Articles","previous_headings":"Data frame and matrix types","what":"Data frame","title":"R objects in Lua code","text":"data frame can created just luajr.list \"class\" attribute set \"data.frame\". However, list class gets returned R, gets turned data frame.","code":"df = luajr.dataframe()"},{"path":"https://nicholasdavies.github.io/luajr/articles/objects.html","id":"matrix","dir":"Articles","previous_headings":"Data frame and matrix types","what":"Matrix","title":"R objects in Lua code","text":"matrix can created special kind luajr.numeric_r \"dim\" attribute set luajr.integer_r({ nrow, ncol }). gets recognized matrix returned R. However, can access elements single index starts 1 goes column-major order. , example, 2x2 matrix, top-left element index 1, bottom-left index 2, top-right index 3 bottom-right index 4. Note reference type.","code":"df = luajr.matrix_r(nrow, ncol)"},{"path":"https://nicholasdavies.github.io/luajr/articles/objects.html","id":"data-matrix","dir":"Articles","previous_headings":"Data frame and matrix types","what":"Data matrix","title":"R objects in Lua code","text":"data matrix can created similar luajr.matrix_r, names column names. names can passed Lua table (e.g. { \"foo\", \"bar\" }) luajr.character luajr.character_r object. Using data matrix slightly faster using data frame one memory allocation needs made, difference order microseconds normal sized data. Also, just going convert returned matrix data frame anyway, lose speed advantage. don’t worry much. column names can get set within Lua using special attribute name \"/matrix/colnames\".","code":"dm = luajr.datamatrix_r(nrow, ncol, names)"},{"path":"https://nicholasdavies.github.io/luajr/articles/objects.html","id":"constants","dir":"Articles","previous_headings":"","what":"Constants","title":"R objects in Lua code","text":"following constants defined luajr table: Note Lua’s semantics dealing logical types NA values different R’s semantics. Lua “understand” NA values way R , sees R logical type fundamentally integer, boolean. Specifically, whereas R following: Lua : hood, R’s TRUE defined integer 1 (though nonzero integer besides NA also test TRUE), FALSE defined 0, NA (logical integer) defined special ‘flag’ value -2147483648 (.e. -2^31). However, Lua, anything nil false evaluates true, meaning following Lua code incorrectly claim luajr.TRUE, luajr.FALSE, luajr.NA_logical_ “TRUE”. , instead, explicitly set logical values either luajr.TRUE, luajr.FALSE, luajr.NA_logical_, explicitly test values. Note different NA constants interchangeable. , testing NA Lua, check value equal (==) equal (~=) corresponding NA constant , depending type variable question. applies vector reference types described . Lua also boolean type (possible values true false) never compare equal either luajr.TRUE, luajr.FALSE NA values. Lua string can never compare equal luajr.NA_character_, conversely Lua number may sometimes compare equal luajr.NA_logical_, luajr.NA_integer_, luajr.NA_real_, careful mix Lua types R constants. Finally, luajr.NULL can used represent NULL value, either part table luajr.list gets returned R. pass NULL Lua arg code \"s\", come nil Lua; use arg code \"r\" \"v\", come luajr.NULL.","code":"luajr.TRUE luajr.FALSE luajr.NA_logical_ luajr.NA_integer_ luajr.NA_real_ luajr.NA_character_ luajr.NULL x = c(TRUE, FALSE, NA) if (x[1]) print(\"First element of x is TRUE!\") x = luajr.logical({ luajr.TRUE, luajr.FALSE, luajr.NA_logical_ }) if x[1] == luajr.TRUE then print(\"First element of x is TRUE!\") end x = luajr.logical({ luajr.TRUE, luajr.FALSE, luajr.NA_logical_ }) for i = 1, #x do     if x[i] then print(\"Element\", i, \"of x is TRUE!\") end end"},{"path":"https://nicholasdavies.github.io/luajr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"luajr package bundles LuaJIT compiler Mike Pall (portions authors Lua) R package wrapper Nick Davies. also bundles debugger.lua Lua debugger Scott Lembcke Howling Moon Software. Therefore, order contribution, authors luajr : Mike Pall. Author, copyright holder.           Author embedded LuaJIT compiler Lua.org, PUC-Rio. Copyright holder.           Copyright holders portions Lua source code included LuaJIT Nicholas Davies. Maintainer, contributor, copyright holder.            Author R package wrapper Scott Lembcke, Howling Moon Software. Contributor, copyright holder.           Authors embedded debugger.lua debugger Please give credit Mike Pall Lua authors, Scott Lembcke Howling Moon Software debugger, direct luajr questions package maintainer!","code":""},{"path":"https://nicholasdavies.github.io/luajr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Davies N (2025). luajr: LuaJIT Scripting. R package, https://nicholasdavies.github.io/luajr/. Pall M (2025). “LuaJIT – Just--Time Compiler Lua.” https://luajit.org/.","code":"@Manual{,   title = {{luajr}: {LuaJIT} Scripting},   author = {Nicholas Davies},   year = {2025},   note = {R package},   url = {https://nicholasdavies.github.io/luajr/}, } @Misc{,   title = {{LuaJIT} -- a Just-In-Time Compiler for Lua.},   author = {Mike Pall},   year = {2025},   url = {https://luajit.org/}, }"},{"path":"https://nicholasdavies.github.io/luajr/index.html","id":"luajr-luajit-scripting","dir":"","previous_headings":"","what":"LuaJIT Scripting","title":"LuaJIT Scripting","text":"luajr provides interface LuaJIT, just--time compiler Lua scripting language. allows users run Lua code R. One advantages using luajr LuaJIT runs Lua code fast compilation times, fast execution times, need external toolchain, LuaJIT compiler “built ” luajr package. contrasts e.g. Rcpp, results compiled code fast execution times slow compilation times need invoke external C++ compiler toolchain like gcc clang.","code":""},{"path":"https://nicholasdavies.github.io/luajr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"LuaJIT Scripting","text":"can install released version luajr CRAN : can install development version luajr GitHub :","code":"install.packages(\"luajr\") # install.packages(\"devtools\") devtools::install_github(\"nicholasdavies/luajr\")"},{"path":"https://nicholasdavies.github.io/luajr/index.html","id":"under-development","dir":"","previous_headings":"","what":"Under development","title":"LuaJIT Scripting","text":"luajr early development. , interface behaviour package subject change.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Lua code — lua","title":"Run Lua code — lua","text":"Runs specified Lua code.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Lua code — lua","text":"","code":"lua(code, filename = NULL, L = NULL)"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Lua code — lua","text":"code Lua code block run. filename non-NULL, name file run. L Lua state run code. NULL (default) uses default Lua state luajr.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Lua code — lua","text":"Lua value(s) returned code block converted R object(s). subset Lua types can converted R objects present. multiple values returned, packaged list.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Lua code — lua","text":"","code":"twelve <- lua(\"return 3*4\") print(twelve) #> [1] 12"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_func.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a Lua function callable from R — lua_func","title":"Make a Lua function callable from R — lua_func","text":"Takes Lua expression (character string) evaluates function provides R function can called invoke Lua function. Instead character string, can also provide external pointer Lua function (see examples \"packages\" vignette information).","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a Lua function callable from R — lua_func","text":"","code":"lua_func(func, argcode = \"s\", L = NULL)"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a Lua function callable from R — lua_func","text":"func character string Lua expression evaluating function, external pointer Lua function. argcode wrap R arguments Lua function. L Lua state run code. NULL (default) uses default Lua state luajr.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_func.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a Lua function callable from R — lua_func","text":"R function can called invoke Lua function.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_func.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a Lua function callable from R — lua_func","text":"R types can passed Lua : NULL, logical vector, integer vector, numeric vector, string vector, list, external pointer, raw. parameter argcode string one character argument Lua function, recycled needed (e.g. single character apply arguments regardless many ). following, corresponding character argcode specific argument referred argcode. NULL argument length 0, result Lua nil regardless corresponding argcode. logical, integer, double, character vectors, corresponding argcode 's' (simplify), R vector length one, supplied Lua primitive (boolean, number, number, string, respectively), length > 1, array, .e. table integer indices starting 1. code '', vector always supplied array, even length 1. argcode digit '1' '9', 's', vector required specific length, otherwise error message emitted. Still focusing vector types, argcode 'r', vector passed reference Lua, adopting type luajr.logical_r, luajr.integer_r, luajr.numeric_r, luajr.character_r appropriate. argcode 'v', vector passed value Lua, adopting type luajr.logical, luajr.integer, luajr.numeric, luajr.character appropriate. raw vector, 's' type accepted result Lua string (potentially embedded nulls). lists, argcode 's' (simplify), list passed Lua table. entries list non-blank names named table, unnamed entries associated integer key table. Note Lua preserve order entries tables. means R list names often go \"order\" passed Lua 's' returned back R. avoided argcode 'r' 'v'. list passed argcode 'r' 'v', list passed Lua type luajr.list, vector elements list passed reference value, respectively. external pointers, argcode ignored external pointer passed Lua type userdata. function called Lua values returned function, Lua return values converted R values follows. nothing returned, function returns invisible() (.e. NULL). multiple arguments returned, list arguments returned. Reference types (e.g. luajr.logical_r) vector types (e.g. luajr.logical) returned R . luajr.list returned R list. Reference list types respect R attributes set within Lua code. table returned list. list, table entries number key come first (indices 1 n, .e. original number key's value discarded), followed table entries string key (named accordingly). may well scramble order keys, beware. Note particular Lua guarantee traverse table ascending order keys. Entries non-number, non-string keys discarded. probably best avoid returning table anything string keys, use luajr.list. Lua string embedded nulls returned R raw type. function returned external pointer, can converted function can called R, passing lua_func() func argument.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_func.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a Lua function callable from R — lua_func","text":"","code":"# use with a character string squared <- lua_func(\"function(x) return x^2 end\") print(squared(7)) #> [1] 49  # use with an external pointer to a Lua function times2ptr <- lua(\"return function(x) return 2 * x end\") print(times2ptr) #> <pointer: 0x14b6853d0> times2 <- lua_func(times2ptr) print(times2(14)) #> [1] 28"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_mode.html","id":null,"dir":"Reference","previous_headings":"","what":"Debugger, profiler, and JIT options — lua_mode","title":"Debugger, profiler, and JIT options — lua_mode","text":"Run Lua code debugger profiler activated, control whether LuaJIT just--time compiler .","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_mode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Debugger, profiler, and JIT options — lua_mode","text":"","code":"lua_mode(expr, debug, profile, jit)"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_mode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Debugger, profiler, and JIT options — lua_mode","text":"expr expression run associated settings. expr present, settings apply expr evaluated. expr missing, settings apply changed another call lua_mode(). debug Control debugger: \"step\" / \"\" / TRUE step line; \"error\" trigger debugger Lua error; \"\" / FALSE switch debugger . profile Control profiler: \"\" / TRUE use profiler's default settings; specially formatted string (see ) control profiler's precision sampling interval; \"\" / FALSE switch profiler . jit Control LuaJIT's just--time compiler: \"\" / TRUE use JIT, \"\" / FALSE use LuaJIT interpreter .","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_mode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Debugger, profiler, and JIT options — lua_mode","text":"called arguments, returns current settings. called expr, calls value returned expr. Otherwise, returns nothing.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_mode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Debugger, profiler, and JIT options — lua_mode","text":"function experimental. interface behaviour may change subsequent versions luajr. lua_mode() works one three ways, depending parameters provided. called arguments, lua_mode() returns current debug, profile, jit settings. called without expr argument, least one debug, profile, jit, specified settings apply subsequent executions Lua code next call lua_mode(). called expr argument, specified settings debug, profile, jit applied temporarily just evaluation expr calling frame. Note provide debug, profile, jit arguments, \"missing\" settings retained current values, reset default \"\" state. words, can temporarily change one setting without affecting others.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_mode.html","id":"the-debugger","dir":"Reference","previous_headings":"","what":"The debugger","title":"Debugger, profiler, and JIT options — lua_mode","text":"debug setting allows run Lua code debug mode, using Scott Lembcke's debugger.lua. Use debug = \"step\" (TRUE \"\") step line code; use debug = \"error\" trigger debugger Lua error; turn debugger debug = \"\" (FALSE). trigger debugger specific place within Lua code, can also call luajr.dbg() Lua code. Within Lua, can also use luajr.dbg(CONDITION) trigger debugging CONDITION evaluates false nil. (way, luajr.dbg(CONDITION) sort like assert(CONDITION) call triggers debugger assert fails.) debugger.lua fully documented github repo page, briefly, enter commands one character debugger.lua> prompt. Use n step next line, q quit, h show help page rest commands.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_mode.html","id":"the-profiler","dir":"Reference","previous_headings":"","what":"The profiler","title":"Debugger, profiler, and JIT options — lua_mode","text":"profile setting allows profile Lua code run, generating information useful optimising execution speed. Use profile = \"\" (TRUE) turn profiler default settings (namely, profile line level sample 1-millisecond intervals). Instead \"\", can pass string containing options: f: enable profiling function level. l: enable profiling line level. <integer>: set sampling interval, milliseconds (default: 1ms). example, default options correspond string \"li1\". must use lua_profile() recover generated profiling data.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_mode.html","id":"jit-options","dir":"Reference","previous_headings":"","what":"JIT options","title":"Debugger, profiler, and JIT options — lua_mode","text":"jit setting allows turn LuaJIT's just--time compiler (jit = \"\" FALSE). default JIT compiler \"\" (alias TRUE). Lua code generally run slowly JIT , although issues reported LuaJIT running slowly JIT processors using ARM64 architecture, includes Apple Silicon CPUs.","code":""},{"path":[]},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_mode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Debugger, profiler, and JIT options — lua_mode","text":"","code":"if (FALSE) { # \\dontrun{ # Debugger in \"one-shot\" mode lua_mode(debug = \"on\",     sum <- lua(\"         local s = 0         for i = 1,10 do             s = s + i         end         return s     \") )  # Profiler in \"switch on / switch off\" mode lua_mode(profile = TRUE) pointless_computation = lua_func( \"function()     local s = startval     for i = 1,10^8 do         s = math.sin(s)         s = math.exp(s^2)         s = s + 1     end     return s end\") lua(\"startval = 100\") pointless_computation() lua_mode(profile = FALSE) lua_profile()  # Turn off JIT and turn it on again lua_mode(jit = \"off\") lua_mode(jit = \"on\") } # }"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_module.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Lua modules — lua_module","title":"Load Lua modules — lua_module","text":"lua_module() can used R project package declare Lua module external file. can use lua_import() access functions within module, provide access functions package users. object returned lua_module() can also used set get (non-function) values stored Lua module table.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_module.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Lua modules — lua_module","text":"","code":"lua_module(filename = NULL, package = NULL)  lua_import(module, name, argcode)"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_module.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Lua modules — lua_module","text":"filename Name file load module. character vector, elements concatenated together file.path(). package non-NULL, file sought within package. module Module previously loaded lua_module(). name Name function import (character string). argcode wrap R arguments Lua function; see documentation lua_func().","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_module.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Lua modules — lua_module","text":"lua_module() returns environment class \"luajr_module\".","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_module.html","id":"typical-usage","dir":"Reference","previous_headings":"","what":"Typical usage","title":"Load Lua modules — lua_module","text":"# load Lua module containing myfunc(x,y) mymod <- lua_module(\"Lua/mymodule.lua\", package = \"mypackage\") func <- function(x, y) lua_import(mymod, \"myfunc\", \"s\")","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_module.html","id":"module-files","dir":"Reference","previous_headings":"","what":"Module files","title":"Load Lua modules — lua_module","text":"Module files file extension .lua placed somewhere project directory. writing package, best practice probably place subdirectory inst/Lua package. module file follow standard practice Lua modules. words, module file return Lua table containing module's functions. relatively minimal example :","code":"local mymodule = {} mymodule.fave_name = \"Nick\"  function mymodule.greet(name)     print(\"Hello, \" .. name .. \"!\")     if name == mymodule.fave_name then         print(\"Incidentally, that's a great name. Nice one.\")     end end  return mymodule"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_module.html","id":"loading-the-module","dir":"Reference","previous_headings":"","what":"Loading the module","title":"Load Lua modules — lua_module","text":"import functions module, need create module object using lua_module(). Supply file name filename argument lua_module(). developing package, also supply package name package argument. package NULL, lua_module() look file relative current working directory. package non-NULL, lua_module() look file relative installed package directory (using system.file()). , developing package put module file inst/Lua/mymodule.lua recommended , supply \"Lua/mymodule.lua\" filename. module returned lua_module() actually loaded first time import function module. want module loaded specific Lua state R project, assign state module's state right declaring :   creating package want load module specific Lua state, need create state assign module$L package loaded, probably using .onLoad().","code":"mymod <- lua_module(\"path/to/file.lua\", package = \"mypackage\") mymod$L <- my_state"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_module.html","id":"importing-functions","dir":"Reference","previous_headings":"","what":"Importing functions","title":"Load Lua modules — lua_module","text":"import function module, declare like :   mymod previously-declared module object, \"funcname\" function name within Lua module, \"s\" whatever argcode want use. Note lua_import() must used statement function body enclose braces ({}). arguments myfunc passed imported function order declared function signature. can give default values function arguments. example , first time call myfunc(), make sure module properly loaded call Lua function. also overwrite existing body myfunc() direct call Lua function subsequent calls myfunc() execute quickly possible. cases, may want processing checking function arguments R calling Lua function. can \"two-step\" process like :   package, can document export function uses lua_import() just like function.","code":"myfunc <- function(x, y) lua_import(mymod, \"funcname\", \"s\") greet0 <- function(name) lua_import(mymod, \"greet\", \"s\") greet <- function(name) {     if (!is.character(name)) {         stop(\"greet expects a character string.\")     }     greet0(name) }"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_module.html","id":"setting-and-getting","dir":"Reference","previous_headings":"","what":"Setting and getting","title":"Load Lua modules — lua_module","text":"Lua modules can contain just functions; can also hold values, shown example module (\"Module files\"). example, module also contains string called fave_name alters behaviour greet function. can get value module using e.g. module[\"fave_name\"] set using e.g. module[\"fave_name\"] <- \"Janet\". must use single brackets [] double brackets [[]] dollar sign $ , change function top level module. module contains table x contains value y, can get set y using multiple indices, e.g. module[\"x\", \"y\"] module[\"x\", \"y\"] <- 1. Using empty brackets, e.g. module[], return contents module, set entire contents module e.g. module[] = foo. default, setting module value using module[] <- value, value passed Lua \"simplify\" (e.g. argcode \"s\"). can change behaviour argument. example, module[, = \"\"] <- 2 set element module Lua table {2} instead plain value 2.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_module.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Lua modules — lua_module","text":"","code":"module <- lua_module(c(\"Lua\", \"example.lua\"), package = \"luajr\") greet <- function(name) lua_import(module, \"greet\", \"s\") greet(\"Janet\") greet(\"Nick\")"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_open.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new Lua state — lua_open","title":"Create a new Lua state — lua_open","text":"Creates new, empty Lua state returns external pointer wrapping state.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_open.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new Lua state — lua_open","text":"","code":"lua_open()"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_open.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new Lua state — lua_open","text":"External pointer wrapping newly created Lua state.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_open.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a new Lua state — lua_open","text":"Lua code executed within given Lua state. Lua state similar global environment R, variables functions defined. luajr automatically maintains \"default\" Lua state, users luajr need use lua_open(). However, whatever reason want maintain multiple different Lua states time, independent global variables functions, lua_open() can used create new Lua state can passed lua(), lua_func() lua_shell() via L parameter. functions operate within Lua state instead default one. default Lua state can specified explicitly L = NULL. Note currently way (provided luajr) saving Lua state disk state can restarted later. Also, lua_close luajr Lua states closed automatically garbage collected R.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_open.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new Lua state — lua_open","text":"","code":"L1 <- lua_open() lua(\"a = 2\") lua(\"a = 4\", L = L1) lua(\"print(a)\") # 2 lua(\"print(a)\", L = L1) # 4"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Lua code in parallel — lua_parallel","title":"Run Lua code in parallel — lua_parallel","text":"Runs Lua function multiple times, function runs divided among multiple threads.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Lua code in parallel — lua_parallel","text":"","code":"lua_parallel(func, n, threads, pre = NA_character_)"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Lua code in parallel — lua_parallel","text":"func Lua expression evaluating function. n Number function executions. threads Number threads create, list existing Lua states (e.g. created lua_open()), different, one thread. pre Lua code block run thread creation.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_parallel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Lua code in parallel — lua_parallel","text":"List n values returned Lua function func.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_parallel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Lua code in parallel — lua_parallel","text":"function experimental. interface behaviour likely change subsequent versions luajr. lua_parallel() works follows. number threads new Lua states created standard Lua libraries luajr module opened (.e. though states created using lua_open()). , thread launched state. Within thread, code pre run corresponding Lua state. , func() called 1:n, calls spread across states. Finally, Lua states closed results returned list. list elements returned correct order, .e. ordering returned list depend actual execution order call func. Instead integer, threads can list Lua states, e.g. NULL default Lua state state returned lua_open(). saves time needed open new states, takes milliseconds.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_parallel.html","id":"safety-and-performance","dir":"Reference","previous_headings":"","what":"Safety and performance","title":"Run Lua code in parallel — lua_parallel","text":"Note func thread-safe. pure Lua code built-Lua library functions thread-safe, except certain functions built-os io libraries (search \"thread safe\" Lua 5.2 reference manual). Additionally, use luajr reference types thread-safe use R allocate manage memory, R thread-safe. means safely use luajr.logical_r, luajr.integer_r, luajr.numeric_r, luajr.character_r, reference types within func. luajr.list luajr.dataframe fine, provided list entries / dataframe columns value types. overhead associated creating new Lua states gathering function results R list. advisable check whether running Lua code parallel actually gives substantial speed increase.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_parallel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Lua code in parallel — lua_parallel","text":"","code":"lua_parallel(\"function(i) return i end\", n = 4, threads = 2) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> [[3]] #> [1] 3 #>  #> [[4]] #> [1] 4 #>"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Get profiling data — lua_profile","title":"Get profiling data — lua_profile","text":"running Lua code profiler active (using lua_mode()), use function get profiling data collected.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get profiling data — lua_profile","text":"","code":"lua_profile(flush = TRUE)"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get profiling data — lua_profile","text":"flush TRUE, clears internal profile data buffer (default); FALSE, . (Set FALSE want 'peek' profiling data collected far, want collect data add later.)","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get profiling data — lua_profile","text":"object class \"luajr_profile\".","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_profile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get profiling data — lua_profile","text":"function experimental. interface behaviour may change subsequent versions luajr.","code":""},{"path":[]},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get profiling data — lua_profile","text":"","code":"if (FALSE) { # \\dontrun{ lua_mode(profile = TRUE) pointless_computation = lua_func( \"function()     local s = startval     for i = 1,10^8 do         s = math.sin(s)         s = math.exp(s^2)         s = s + 1     end     return s end\") lua(\"startval = 100\") pointless_computation() lua_mode(profile = FALSE)  prof = lua_profile() } # }"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_reset.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset the default Lua state — lua_reset","title":"Reset the default Lua state — lua_reset","text":"Clears variables default Lua state, freeing associated memory.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_reset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset the default Lua state — lua_reset","text":"","code":"lua_reset()"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_reset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reset the default Lua state — lua_reset","text":"None.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_reset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reset the default Lua state — lua_reset","text":"resets default Lua state . reset non-default Lua state L returned lua_open(), just L <- lua_open() . memory previously used cleaned next garbage collection.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_reset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reset the default Lua state — lua_reset","text":"","code":"lua(\"a = 2\") lua_reset() lua(\"print(a)\") # nil"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_shell.html","id":null,"dir":"Reference","previous_headings":"","what":"Run an interactive Lua shell — lua_shell","title":"Run an interactive Lua shell — lua_shell","text":"interactive mode, provides basic read-eval-print loop LuaJIT.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_shell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run an interactive Lua shell — lua_shell","text":"","code":"lua_shell(L = NULL)"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_shell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run an interactive Lua shell — lua_shell","text":"L Lua state run code. NULL (default) uses default Lua state luajr.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_shell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run an interactive Lua shell — lua_shell","text":"None.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_shell.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run an interactive Lua shell — lua_shell","text":"Enter empty line return R. convenience, lines starting equals sign \"=\" replaced \"return \", e.g. entering =x show value x returned R.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/luajr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"luajr: LuaJIT Scripting — luajr-package","title":"luajr: LuaJIT Scripting — luajr-package","text":"interface 'LuaJIT' https://luajit.org, just--time compiler 'Lua' scripting language https://www.lua.org. Allows users run 'Lua' code 'R'.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/luajr-package.html","id":"the-r-api","dir":"Reference","previous_headings":"","what":"The R API","title":"luajr: LuaJIT Scripting — luajr-package","text":"lua(): run Lua code lua_func(): make Lua function callable R lua_shell(): run interactive Lua shell lua_module(), lua_import(): load Lua modules lua_open(): create new Lua state lua_reset(): reset default Lua state lua_parallel(): run Lua code parallel lua_mode(), lua_profile(): debugger, profiler, JIT options","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/luajr-package.html","id":"further-reading","dir":"Reference","previous_headings":"","what":"Further reading","title":"luajr: LuaJIT Scripting — luajr-package","text":"introduction 'luajr', see vignette(\"luajr\")","code":""},{"path":[]},{"path":"https://nicholasdavies.github.io/luajr/reference/luajr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"luajr: LuaJIT Scripting — luajr-package","text":"Maintainer: Nicholas Davies nicholas.davies@lshtm.ac.uk (ORCID) (Author R package wrapper) [contributor, copyright holder] Authors: Mike Pall (Author embedded LuaJIT compiler) [copyright holder] contributors: Lua.org, PUC-Rio (Copyright holders portions Lua source code included LuaJIT) [copyright holder] Scott Lembcke, Howling Moon Software (Authors embedded debugger.lua debugger) [contributor, copyright holder]","code":""},{"path":"https://nicholasdavies.github.io/luajr/news/index.html","id":"luajr-development-version","dir":"Changelog","previous_headings":"","what":"luajr (development version)","title":"luajr (development version)","text":"Added support Lua modules using lua_module() lua_import(). simplifies process adding Lua code R package, now explained new vignette. addresses issue #4. Thanks @al-obrien asking ! Added speed comparison luajr / Lua versus Rcpp / C++. lua_func() can now accept external pointer Lua function.","code":""},{"path":"https://nicholasdavies.github.io/luajr/news/index.html","id":"luajr-019","dir":"Changelog","previous_headings":"","what":"luajr 0.1.9","title":"luajr 0.1.9","text":"CRAN release: 2025-04-30 Added debugging profiling Lua code. debugger Scott Lembcke’s debugger.lua, profiler LuaJIT’s built-sampling profiler. Also added option turning JIT compilation. accessed new function, lua_mode(). Added code ensure LuaJIT never calls exit() directly never tries read write standard input output streams, instead redirecting R console.","code":""},{"path":"https://nicholasdavies.github.io/luajr/news/index.html","id":"luajr-018","dir":"Changelog","previous_headings":"","what":"luajr 0.1.8","title":"luajr 0.1.8","text":"CRAN release: 2024-07-01 Lua “io” library now capable getting input R console (e.g. io.read()) – previously, trying cause R hang (least RStudio). Lua os.exit() function now ends Lua execution without crashing RStudio. lua_shell() now stores commands R console history. luajr build process now skips making libluajit.luajit executable, needed luajr. Corrected oversight documentation lua_shell(); fixes issue #3. Thanks @SugarRayLua bringing attention ! Addressed issues turned CRAN checks.","code":""},{"path":"https://nicholasdavies.github.io/luajr/news/index.html","id":"luajr-017","dir":"Changelog","previous_headings":"","what":"luajr 0.1.7","title":"luajr 0.1.7","text":"CRAN release: 2024-04-24 Added support passing R type “raw” Lua, string potentially embedded nulls, returning strings embedded nulls Lua, become “raw”s R. Replaced calls Rf_allocVector3 calls Rf_allocVector, former apparently part API allowed CRAN packages, requested CRAN. @TimTaylor improved R version “logistic map” example benchmark main luajr vignette, now R version 10x slower Lua version, 2,500x slower. fixes issue #2. Thanks Tim! Removed compiler flag, -Wformat, causing errors standard R environments, notably rocker/r-base Docker environment. fixes issue #1. Thanks @jonocarroll reporting helping fix luajr’s first official bug! :-)","code":""},{"path":"https://nicholasdavies.github.io/luajr/news/index.html","id":"luajr-016","dir":"Changelog","previous_headings":"","what":"luajr 0.1.6","title":"luajr 0.1.6","text":"CRAN release: 2024-02-23 version makes changes DESCRIPTION LICENSE requested CRAN.","code":""},{"path":"https://nicholasdavies.github.io/luajr/news/index.html","id":"luajr-015","dir":"Changelog","previous_headings":"","what":"luajr 0.1.5","title":"luajr 0.1.5","text":"version updates package DESCRIPTION CITATION better reflect Mike Pall’s role author embedded LuaJIT compiler.","code":""},{"path":"https://nicholasdavies.github.io/luajr/news/index.html","id":"luajr-014","dir":"Changelog","previous_headings":"","what":"luajr 0.1.4","title":"luajr 0.1.4","text":"Added luajr.NULL, allow working NULL Lua. Fixed problems CRAN.","code":""},{"path":"https://nicholasdavies.github.io/luajr/news/index.html","id":"luajr-013","dir":"Changelog","previous_headings":"","what":"luajr 0.1.3","title":"luajr 0.1.3","text":"Added vignette describing luajr Lua module. Added lua_parallel() basic multithreading. Fixed compilation warnings enums platforms.","code":""},{"path":"https://nicholasdavies.github.io/luajr/news/index.html","id":"luajr-012","dir":"Changelog","previous_headings":"","what":"luajr 0.1.2","title":"luajr 0.1.2","text":"CRAN release: 2024-01-27 luajr now CRAN!","code":""}]
