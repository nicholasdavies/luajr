[{"path":"https://nicholasdavies.github.io/luajr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 luajr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"vector-types","dir":"Articles","previous_headings":"","what":"Vector types","title":"Interface with R from Lua","text":"vector types modelled C++’s std::vector class. vector type end pass argument Lua function using lua_func() arg code \"v\", can also create new vectors within Lua. Like C++ counterparts, vector types maintain internal “capacity” equal greater “length”, actual number elements. exception character vector, implemented internally Lua table interface vector types. Note vector types, indexes start 1, 0. must careful access write bounds, luajr module bounds checking. Going bounds cause crashes undefined behaviour. Unlike Lua tables, vector types can indexed integers 1 vector length, strings types.","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"vcreate","dir":"Articles","previous_headings":"Vector types","what":"Creating and testing vector types","title":"Interface with R from Lua","text":"luajr.logical(, b), luajr.integer(, b), luajr.numeric(, b), luajr.character(, b) functions can used create “vector types” Lua code. meaning b depends type. example: , n nonnegative number, x boolean, number, string (appropriate vector type) nil, v another vector object type, z table, vector type, reference type. x == nil (n, x) form functions, values vector left uninitialized (except luajr.character, values set empty string). luajr.is_logical(obj), luajr.is_integer(obj), luajr.is_numeric(obj), luajr.is_character(obj) Check whether value obj one corresponding vector types. return true obj corresponding type, false otherwise.","code":"luajr.numeric()     -- Empty numeric vector luajr.numeric(n, x) -- Size-n numeric vector, all entries equal to x luajr.numeric(v)    -- Copied from vector v luajr.numeric(z)    -- Copied from \"vector-ish\" object z"},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"vector-type-methods","dir":"Articles","previous_headings":"Vector types","what":"Vector type methods","title":"Interface with R from Lua","text":"vector types following methods: #v Returns length vector. x = v[], v[] = x Get set ith element vector. : Note vector types, indexes start 1, 0. must careful access write bounds, luajr module bounds checking. Going bounds cause crashes undefined behaviour. Unlike Lua tables, vector types can indexed integers 1 vector length, strings types. pairs(v), ipairs(v) Use Lua loop iterate values vector. example: Note vector types, pairs ipairs interchangeable loop can written v:assign(, b) Assign new value vector; b meaning vector type constructors. v:print() Print value vector next index, value new line. v:concat(sep) Returns string comprised elements vector converted strings concatenated together sep separator. sep missing, default \",\". v:debug_str() Returns compact string representation vector, useful mainly debugging. contains length vector, capacity vector, vector elements separated commas. v:reserve(n) n larger vector’s current capacity, suggests vector enlarged capacity n. Otherwise, nothing. v:capacity() Returns capacity vector. v:shrink_to_fit() vector’s capacity larger length, reallocates vector capacity equal length. v:clear() Sets size vector 0. v:resize(n, val) Sets size vector n. n smaller vector’s current length, removes elements end vector. n larger vector’s current length, adds new elements end equal val. val can nil missing. v:push_back(val) Adds val end vector. v:pop_back() Removes one element end vector. v:insert(, , b) Inserts new elements position , must 1 #v + 1. b meaning vector type constructors. v:erase(first, last) Removes elements position first position last, inclusive (e.g. v:erase(1, #v) erases whole vector). last nil missing, just erases single element position first.","code":"for i,x in pairs(v) do     print(i, x) end for i = 1, #v do     print(i, v[i]) end"},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"reference-types","dir":"Articles","previous_headings":"","what":"Reference types","title":"Interface with R from Lua","text":"reference types similar vector types, “low-level” hence missing much functionality vector types. map directly onto memory managed R, judicious use reference types passing returning Lua can avoid unnecessary memory allocations copies. Although reference types missing lots methods vector types , one feature vector types don’t , namely can set get attributes associated underlying R value. reference type end pass argument Lua function using lua_func() arg code \"r\", can also create new reference types within Lua. vector types, indexes start 1, 0, must careful access write bounds. Finally, reference types depend upon R, completely thread safe therefore safely used lua_parallel().","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"creating-and-testing-reference-types","dir":"Articles","previous_headings":"Reference types","what":"Creating and testing reference types","title":"Interface with R from Lua","text":"luajr.logical_r(, b), luajr.integer_r(, b), luajr.numeric_r(, b), luajr.character_r(, b) functions can used create “vector types” Lua code. meaning b depends type. Namely: , n nonnegative number, x boolean, number, string (appropriate vector type) nil, z table, vector type, reference type. luajr.is_logical_r(obj), luajr.is_integer_r(obj), luajr.is_numeric_r(obj), luajr.is_character_r(obj) Check whether value obj one corresponding reference types. return true obj corresponding type, false otherwise.","code":"luajr.numeric_r(n, x) -- Size n, all entries equal to x if x ~= nil luajr.numeric_r(z)    -- Copied from \"vector-ish\" object z"},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"reference-type-methods","dir":"Articles","previous_headings":"Reference types","what":"Reference type methods","title":"Interface with R from Lua","text":"reference types following methods: #v Returns length referenced vector. x = v[], v[] = x Get set ith element referenced vector. pairs(v), ipairs(v) Use Lua loop iterate values vector. x = v(attr), v(attr, x) Get set attribute named attr. second form, two arguments, sets attribute x. Note even though can get manipulate names attribute, access reference vector’s elements names.","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"list-type","dir":"Articles","previous_headings":"","what":"List type","title":"Interface with R from Lua","text":"list special kind Lua table can indexed either positive integers strings. Unlike Lua table, list remembers order added elements , like R list .","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"creating-and-testing-lists","dir":"Articles","previous_headings":"List type","what":"Creating and testing lists","title":"Interface with R from Lua","text":"luajr.list() Creates new, empty list. luajr.is_list(obj) Check whether value obj list. Returns true obj list, false otherwise.","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"list-methods","dir":"Articles","previous_headings":"List type","what":"List methods","title":"Interface with R from Lua","text":"Lists following methods: #v Returns length list, including integer- string-keyed entries. differs behaviour # operator normal Lua tables, report number integer-keyed entries. x = v[], v[] = x Get set element list. can either positive integer string. Note write integer keys greater #v + 1. pairs(v), ipairs(v) Use Lua loop iterate values vector. Unlike vector reference types, pairs ipairs exactly applied lists; former provide either string number keys iterate list (strings present, numbers otherwise) latter give number keys . Either one iterates every element list iterate list order. x = v(attr), v(attr, x) Get set attribute named attr. second form, two arguments, sets attribute x. Note , list, \"names\" attribute simple vector names, like R, associative array linking keys indices. example, list elements = 1, 2, c = 3, v(\"names\") equal { \"\" = 1, \"c\" = 3 }. However, list returned R, \"names\" attribute normal R format. Note lists interface setting getting attributes, unlike reference types (also capability), internally managed R. means safe use lua_parallel(), long don’t contain reference types.","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"data-frame-and-matrix-types","dir":"Articles","previous_headings":"","what":"Data frame and matrix types","title":"Interface with R from Lua","text":"handful additional types based types, special behaviour returned R.","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"data-frame","dir":"Articles","previous_headings":"Data frame and matrix types","what":"Data frame","title":"Interface with R from Lua","text":"data frame can created just luajr.list \"class\" attribute set \"data.frame\". However, list class gets returned R, gets turned data frame.","code":"df = luajr.dataframe()"},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"matrix","dir":"Articles","previous_headings":"Data frame and matrix types","what":"Matrix","title":"Interface with R from Lua","text":"matrix can created special kind luajr.numeric_r \"dim\" attribute set luajr.integer_r({ nrow, ncol }). gets recognized matrix returned R. However, can access elements single index starts 1 goes column-major order. , example, 2x2 matrix, top-left element index 1, bottom-left index 2, top-right index 3 bottom-right index 4. Note reference type.","code":"df = luajr.matrix_r(nrow, ncol)"},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"data-matrix","dir":"Articles","previous_headings":"Data frame and matrix types","what":"Data matrix","title":"Interface with R from Lua","text":"data matrix can created similar luajr.matrix_r, names column names. names can passed Lua table (e.g. { \"foo\", \"bar\" }) luajr.character luajr.character_r object. Using data matrix slightly faster using data frame one memory allocation needs made, difference order microseconds normal sized data. Also, just going convert returned matrix data frame anyway, lose speed advantage. don’t worry much. column names can get set within Lua using special attribute name \"/matrix/colnames\".","code":"dm = luajr.datamatrix_r(nrow, ncol, names)"},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr-module.html","id":"constants","dir":"Articles","previous_headings":"","what":"Constants","title":"Interface with R from Lua","text":"following constants defined luajr table: Note Lua’s semantics dealing logical types NA values different R’s semantics. Lua “understand” NA values way R , sees R logical type fundamentally integer, boolean. Specifically, whereas R following: Lua : hood, R’s TRUE defined integer 1 (though nonzero integer besides NA also test TRUE), FALSE defined 0, NA (logical integer) defined special ‘flag’ value -2147483648 (.e. -2^31). However, Lua, anything nil false evaluates true, meaning following Lua code incorrectly claim luajr.TRUE, luajr.FALSE, luajr.NA_logical_ “TRUE”. , instead, explicitly set logical values either luajr.TRUE, luajr.FALSE, luajr.NA_logical_, explicitly test values. Note different NA constants interchangeable. , testing NA Lua, check value equal (==) equal (~=) corresponding NA constant , depending type variable question. applies vector reference types described . Lua also boolean type (possible values true false) never compare equal either luajr.TRUE, luajr.FALSE NA values. Lua string can never compare equal luajr.NA_character_, conversely Lua number may sometimes compare equal luajr.NA_logical_, luajr.NA_integer_, luajr.NA_real_, careful mix Lua types R constants. Finally, luajr.NULL can used represent NULL value, either part table luajr.list gets returned R. pass NULL Lua arg code \"s\", come nil Lua; use arg code \"r\" \"v\", come luajr.NULL.","code":"luajr.TRUE luajr.FALSE luajr.NA_logical_ luajr.NA_integer_ luajr.NA_real_ luajr.NA_character_ luajr.NULL x = c(TRUE, FALSE, NA) if (x[1]) print(\"First element of x is TRUE!\") x = luajr.logical({ luajr.TRUE, luajr.FALSE, luajr.NA_logical_ }) if x[1] == luajr.TRUE then print(\"First element of x is TRUE!\") end x = luajr.logical({ luajr.TRUE, luajr.FALSE, luajr.NA_logical_ }) for i = 1, #x do     if x[i] then print(\"Element\", i, \"of x is TRUE!\") end end"},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr.html","id":"running-lua-code-lua-and-lua_shell","dir":"Articles","previous_headings":"","what":"Running Lua code: lua() and lua_shell()","title":"Introduction to `luajr`","text":"get feel luajr run “one-” Lua code R project, use lua() lua_shell(). pass character string lua(), run Lua code: Assignments global variables persist calls lua(): luajr maintains “default Lua state” holds global variables. default Lua state opened first time package function used. can create , separate Lua states, reset default Lua state (see Lua states, ). Assignments local variables persist calls lua(): case, second line returns \"walrus\" local variable my_animal goes scope first call lua() ends, second call lua() referring back global variable my_animal . can include one statement code run lua(): can also use filename argument lua() load run Lua source file, instead running contents string. Call lua_shell() open interactive Lua shell R prompt. can can helpful debugging testing Lua statements.","code":"library(luajr) lua(\"return 'Hello ' .. 'world!'\") #> [1] \"Hello world!\" lua(\"my_animal = 'walrus'\") lua(\"return my_animal\") #> [1] \"walrus\" lua(\"local my_animal = 'donkey'\") lua(\"return my_animal\") #> [1] \"walrus\" lua(\"local my_veg = 'potato'; local my_dish = my_veg .. ' pie'; return my_dish\") #> [1] \"potato pie\""},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr.html","id":"calling-lua-functions-from-r-lua_func","dir":"Articles","previous_headings":"","what":"Calling Lua functions from R: lua_func()","title":"Introduction to `luajr`","text":"key piece functionality luajr probably lua_func(). allows call Lua functions R. first argument lua_func(), func, string evaluate Lua function. lua_func() returns R function can used call Lua function R. example, can use lua_func() access existing Lua function R: , \"type\" just referring built-Lua function type returns string describing Lua type value passed . can also use lua_func() refer previously defined function default Lua state: can use lua_func() define anonymous Lua function: hood, lua_func() just takes first parameter (string), adds \"return \" front , executes Lua code, registers result function. second argument lua_func(), argcode, also important. argcode determines arguments passed function R translated Lua values use inside function. permissible arg codes : 's': simplest Lua type (default) '': array type '1': 's', require argument length 1 … '9': 's', require argument length 9 'v': pass value 'r': pass reference kinds R values can passed Lua functions, behaviour different arg codes, summarized following table: , nn stands integer greater 1; examples, stands specifically 2. one character argcode every argument function, string “recycled” arguments passed characters argcode string. , example, just passing \"s\" argcode means parameters passed simplest Lua type, argcode \"sr\", first argument arg code \"s\", second argument arg code \"r\", third argument arg code \"s\", etc. vector (logical vector, integer vector, numeric vector, character vector) passed R Lua reference, modifications made elements passed-vector persist back R calling frame. example: Vectors can never resized reference; already-existing elements can changed reference. Lists always passed value, vector elements can either passed value reference depending arg code. order make changes list, needs returned calling function. example: Note examples , modify x[1][1], just x[1]. , even lists passed reference, need modify specific elements vector elements want make changes reference. Setting x[1] = 999 reassign element list x, lists passed reference , effect R object passed . contrast, setting x[1][1] = 999 modifies passed-vector x[1], can passed reference, change R object passed . modify list, return new value function: , returning modified value, can add elements list (f3) change whole entries list (f4).","code":"luatype = lua_func(\"type\") luatype(TRUE) #> [1] \"boolean\" lua(\"function squared(x) return x^2 end\") lua(\"return squared(4)\") #> [1] 16  sq = lua_func(\"squared\") sq(8) #> [1] 64 timestwo = lua_func(\"function(x) return x*2 end\") timestwo(123) #> [1] 246 values = c(1.0, 2.0, 3.0) keep = lua_func(\"function(x) x[1] = 999 end\", \"v\") # passed by value keep(values) print(values) #> [1] 1 2 3  change = lua_func(\"function(x) x[1] = 999 end\", \"r\") # passed by reference change(values) print(values) #> [1] 999   2   3 x = list(1)  f1 = lua_func(\"function(x) x[1][1] = 999; x.a = 42; end\", \"v\") f1(x) print(x) #> [[1]] #> [1] 1  f2 = lua_func(\"function(x) x[1][1] = 999; x.a = 42; end\", \"r\") f2(x) print(x) #> [[1]] #> [1] 999 x = list(1)  f3 = lua_func(\"function(x) x[1][1] = 999; x.a = 42; return x; end\", \"v\") x = f3(x) print(x) #> [[1]] #> [1] 999 #>  #> $a #> [1] 42  f4 = lua_func(\"function(x) x[1] = luajr.numeric({888, 999}); return x; end\", \"v\") x = f4(x) print(x) #> [[1]] #> [1] 888 999 #>  #> $a #> [1] 42"},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr.html","id":"benchmarking","dir":"Articles","previous_headings":"","what":"Benchmarking","title":"Introduction to `luajr`","text":"way using R packages cpp11 Rcpp allows bridge R code C++ code runs faster R, can use luajr bridge R code Lua code runs faster R. general, C/C++ code runs 5-1,000 times faster equivalent R code. experience, luajr code often presents similar speedup, C/C++ code, worst case, maybe half fast. Sometimes luajr code can faster C/C++, though usually isn’t quite good. use luajr ? Rcpp cpp11 require C++ toolchain (e.g. gcc, clang, etc.) requires long compilation times, whereas luajr doesn’t. means luajr usable C++ compiler isn’t available, compilation times prohibitive annoyance. following section, look two aspects benchmarking. first example, compare different ways passing vectors Lua functions relative R. second example, compare fundamentally difference running whole algorithm Lua versus R.","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr.html","id":"parameter-passing-example-sum-of-squares","dir":"Articles","previous_headings":"Benchmarking","what":"Parameter passing example: sum of squares","title":"Introduction to `luajr`","text":"reasonably long vectors, passing reference ('r') faster passing value ('v'), faster passing simplify ('s', '', '1'–'9'). relatively short vectors, passing simplify can avoid overhead, simple operations short vectors, might worth using Lua . illustrate points, code takes numeric vector calculates sum squares, comparing pure R function three alternatives written Lua, respectively passing vector reference, value, simplify. time taken sum v1, v4 v7, depending upon function kind, 2019-era MacBook Pro summarised table: vector 10 elements long, R version wins handily. vector 10,000 elements long, pass--reference Lua version fastest, methods comparable. vector 10,000,000 elements long, story similar. example luajr doesn’t add much speed—function relatively short, certain amount overhead invoking , R function doesn’t overhead transferring control languages.","code":"v1 = rnorm(1e1) v4 = rnorm(1e4) v7 = rnorm(1e7)  lua(\"sum2 = function(x) local s = 0; for i=1,#x do s = s + x[i]*x[i] end; return s end\") sum2 = function(x) sum(x*x) sum2_r = lua_func(\"sum2\", \"r\") sum2_v = lua_func(\"sum2\", \"v\") sum2_s = lua_func(\"sum2\", \"s\")  # Comparing the results of each function: sum2(v1)    # Pure R version #> [1] 5.493679 sum2_r(v1)  # luajr pass-by-reference #> [1] 5.493679 sum2_v(v1)  # luajr pass-by-value #> [1] 5.493679 sum2_s(v1)  # luajr pass-by-simplify #> [1] 5.493679"},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr.html","id":"processing-time-example-logistic-map","dir":"Articles","previous_headings":"Benchmarking","what":"Processing time example: logistic map","title":"Introduction to `luajr`","text":"Consider following: comparing two different versions (R versus Lua) running parameter sweep logistic map, chaotic dynamical system popularized Bob May 1976 Nature article. output looks like :  times taken function 2019-era MacBook Pro follows: version written Lua around 2,500 times faster version R.","code":"logistic_map_R = function(x0, burn, iter, A) {     result = data.frame(a = rep(A, each = iter), x = 0)          j = 1     for (a in A) {         x = x0         for (i in 1:burn) {              x = a * x * (1 - x)         }         for (i in 1:iter) {              result$x[j] = x             x = a * x * (1 - x)             j = j + 1         }     }          return (result) }  logistic_map_L = lua_func( \"function(x0, burn, iter, A)     local dflen = #A * iter     local result = luajr.dataframe()     result.a = luajr.numeric_r(dflen, 0)     result.x = luajr.numeric_r(dflen, 0)          local j = 1     for k,a in pairs(A) do         local x = x0         for i = 1, burn do             x = a * x * (1 - x)         end         for i = 1, iter do             result.a[j] = a             result.x[j] = x             x = a * x * (1 - x)             j = j + 1         end     end          return result end\", \"sssr\") logistic_map = logistic_map_L(0.5, 50, 100, 200:385/100) plot(logistic_map$a, logistic_map$x, pch = \".\")"},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr.html","id":"states","dir":"Articles","previous_headings":"","what":"Working with Lua States: lua_open(), lua_reset()","title":"Introduction to `luajr`","text":"functions mentioned (lua(), lua_shell(), lua_func()) can also take argument L specifies particular Lua state function operates . L = NULL (default) functions operate default Lua state. can also open alternative Lua states using lua_open(), passing result parameter L, specify function operates specific state. example: lua_close luajr Lua states closed automatically garbage collected R. lua_reset() resets default Lua state: reset non-default Lua state L returned lua_open(), just L = lua_open() . memory previously used L cleaned next garbage collection.","code":"L1 = lua_open() lua(\"a = 2\") lua(\"a = 4\", L = L1) lua(\"return a\") #> [1] 2 lua(\"return a\", L = L1) #> [1] 4 lua(\"a = 2\") lua(\"return a\") #> [1] 2 lua_reset() lua(\"return a\") #> NULL"},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"Introduction to `luajr`","text":"notes luajr Lua module – contains functions types interacting R Lua code – see vignette(\"luajr-module\").","code":""},{"path":"https://nicholasdavies.github.io/luajr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicholas Davies. Maintainer, author, copyright holder. Mike Pall. Copyright holder.            Author embedded LuaJIT compiler Lua.org, PUC-Rio. Copyright holder.            Authors Lua scripting language","code":""},{"path":"https://nicholasdavies.github.io/luajr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Davies N (2024). luajr: 'LuaJIT' Scripting. https://github.com/nicholasdavies/luajr, https://nicholasdavies.github.io/luajr/.","code":"@Manual{,   title = {luajr: 'LuaJIT' Scripting},   author = {Nicholas Davies},   year = {2024},   note = {https://github.com/nicholasdavies/luajr, https://nicholasdavies.github.io/luajr/}, }"},{"path":"https://nicholasdavies.github.io/luajr/index.html","id":"luajr-luajit-scripting","dir":"","previous_headings":"","what":"LuaJIT Scripting","title":"LuaJIT Scripting","text":"luajr provides interface LuaJIT, just--time compiler Lua scripting language. allows users run Lua code R. One advantages using luajr LuaJIT runs Lua code fast compilation times, fast execution times, need external toolchain, LuaJIT compiler “built ” luajr package. contrasts e.g. Rcpp, results compiled code fast execution times slow compilation times need invoke external C++ compiler toolchain like gcc clang.","code":""},{"path":"https://nicholasdavies.github.io/luajr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"LuaJIT Scripting","text":"can install released version luajr CRAN : can install development version luajr GitHub :","code":"install.packages(\"luajr\") # install.packages(\"devtools\") devtools::install_github(\"nicholasdavies/luajr\")"},{"path":"https://nicholasdavies.github.io/luajr/index.html","id":"under-development","dir":"","previous_headings":"","what":"Under development","title":"LuaJIT Scripting","text":"luajr early development. , interface behaviour package subject change.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Lua code — lua","title":"Run Lua code — lua","text":"Runs specified Lua code.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Lua code — lua","text":"","code":"lua(code, filename = NULL, L = NULL)"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Lua code — lua","text":"code Lua code block run. filename non-NULL, name file run. L Lua state run code. NULL (default) uses default Lua state luajr.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Lua code — lua","text":"Lua value(s) returned code block converted R object(s). subset Lua types can converted R objects present. multiple values returned, packaged list.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Lua code — lua","text":"","code":"twelve <- lua(\"return 3*4\") print(twelve) #> [1] 12"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_func.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a Lua function callable from R — lua_func","title":"Make a Lua function callable from R — lua_func","text":"Takes Lua expression evaluates function provides R function can called invoke Lua function.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a Lua function callable from R — lua_func","text":"","code":"lua_func(func, argcode = \"s\", L = NULL)"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a Lua function callable from R — lua_func","text":"func Lua expression evaluating function. argcode wrap R arguments Lua function. L Lua state run code. NULL (default) uses default Lua state luajr.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_func.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a Lua function callable from R — lua_func","text":"R function can called invoke Lua function.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_func.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a Lua function callable from R — lua_func","text":"R types can passed Lua : NULL, logical vector, integer vector, numeric vector, string vector, list, external pointer. parameter argcode string one character argument Lua function, recycled needed (e.g. single character apply arguments regardless many ). following, corresponding character argcode specific argument referred argcode. NULL argument length 0, result Lua nil regardless corresponding argcode. logical, integer, double, character vectors, corresponding argcode 's' (simplify), R vector length one, supplied Lua primitive (boolean, number, number, string, respectively), length > 1, array, .e. table integer indices starting 1. code '', vector always supplied array, even length 1. argcode digit '1' '9', 's', vector required specific length, otherwise error message emitted. Still focusing vectors, argcode 'r', vector passed reference Lua, adopting type luajr.logical_r, luajr.integer_r, luajr.numeric_r, luajr.character_r appropriate. argcode 'v', vector passed value Lua, adopting type luajr.logical, luajr.integer, luajr.numeric, luajr.character appropriate. lists, argcode 's' (simplify), list passed Lua table. entries list non-blank names named table, unnamed entries associated integer key table. Note Lua preserve order entries tables. means R list names often go \"order\" passed Lua 's' returned back R. avoided argcode 'r' 'v'. list passed argcode 'r' 'v', list passed Lua type luajr.list, vector elements list passed reference value, respectively. external pointers, argcode ignored external pointer passed Lua type userdata. function called Lua values returned function, Lua return values converted R values follows. nothing returned, function returns invisible() (.e. NULL). multiple arguments returned, list arguments returned. Reference types (e.g. luajr.logical_r) vector types (e.g. luajr.logical) returned R . luajr.list returned R list. Reference list types respect R attributes set within Lua code. table returned list. list, table entries number key come first (indices 1 n, .e. original number key's value discarded), followed table entries string key (named accordingly). may well scramble order keys, beware. Note particular Lua guarantee traverse table ascending order keys. Entries non-number, non-string keys discarded. probably best avoid returning table anything string keys, use luajr.list.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_func.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a Lua function callable from R — lua_func","text":"","code":"squared <- lua_func(\"function(x) return x^2 end\") print(squared(7)) #> [1] 49"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_open.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new Lua state — lua_open","title":"Create a new Lua state — lua_open","text":"Creates new, empty Lua state returns external pointer wrapping state.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_open.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new Lua state — lua_open","text":"","code":"lua_open()"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_open.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new Lua state — lua_open","text":"External pointer wrapping newly created Lua state.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_open.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a new Lua state — lua_open","text":"Lua code executed within given Lua state. Lua state similar global environment R, variables functions defined. luajr automatically maintains \"default\" Lua state, users luajr need use lua_open(). However, whatever reason want maintain multiple different Lua states time, independent global variables functions, lua_open() can used create new Lua state can passed lua(), lua_func() lua_shell() via L parameter. functions operate within Lua state instead default one. default Lua state can specified explicitly L = NULL. Note currently way (provided luajr) saving Lua state disk state can restarted later. Also, lua_close luajr Lua states closed automatically garbage collected R.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_open.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new Lua state — lua_open","text":"","code":"L1 <- lua_open() lua(\"a = 2\") lua(\"a = 4\", L = L1) lua(\"print(a)\") # 2 lua(\"print(a)\", L = L1) # 4"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Lua code in parallel — lua_parallel","title":"Run Lua code in parallel — lua_parallel","text":"Runs Lua function multiple times, function runs divided among multiple threads.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Lua code in parallel — lua_parallel","text":"","code":"lua_parallel(func, n, threads, pre = NA_character_)"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Lua code in parallel — lua_parallel","text":"func Lua expression evaluating function. n Number function executions. threads Number threads create, list existing Lua states (e.g. created lua_open()), different, one thread. pre Lua code block run thread creation.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_parallel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Lua code in parallel — lua_parallel","text":"List n values returned Lua function func.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_parallel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Lua code in parallel — lua_parallel","text":"function experimental. interface behaviour likely change subsequent versions luajr. lua_parallel() works follows. number threads new Lua states created standard Lua libraries luajr module opened (.e. though states created using lua_open()). , thread launched state. Within thread, code pre run corresponding Lua state. , func() called 1:n, calls spread across states. Finally, Lua states closed results returned list. Instead integer, threads can list Lua states, e.g. NULL default Lua state state returned lua_open(). saves time needed open new states, takes milliseconds.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_parallel.html","id":"safety-and-performance","dir":"Reference","previous_headings":"","what":"Safety and performance","title":"Run Lua code in parallel — lua_parallel","text":"Note func thread-safe. pure Lua code built-Lua library functions thread-safe, except certain functions built-os io libraries (search \"thread safe\" Lua 5.2 reference manual). Additionally, use luajr reference types thread-safe use R allocate manage memory, R thread-safe. means safely use luajr.logical_r, luajr.integer_r, luajr.numeric_r, luajr.character_r, reference types within func. luajr.list luajr.dataframe fine, provided list entries / dataframe columns value types. overhead associated creating new Lua states gathering function results R list. advisable check whether running Lua code parallel actually gives substantial speed increase.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_parallel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Lua code in parallel — lua_parallel","text":"","code":"lua_parallel(\"function(i) return i end\", n = 4, threads = 2) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> [[3]] #> [1] 3 #>  #> [[4]] #> [1] 4 #>"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_reset.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset the default Lua state — lua_reset","title":"Reset the default Lua state — lua_reset","text":"Clears variables default Lua state, freeing associated memory.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_reset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset the default Lua state — lua_reset","text":"","code":"lua_reset()"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_reset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reset the default Lua state — lua_reset","text":"None.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_reset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reset the default Lua state — lua_reset","text":"resets default Lua state . reset non-default Lua state L returned lua_open(), just L <- lua_open() . memory previously used cleaned next garbage collection.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_reset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reset the default Lua state — lua_reset","text":"","code":"lua(\"a = 2\") lua_reset() lua(\"print(a)\") # nil"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_shell.html","id":null,"dir":"Reference","previous_headings":"","what":"Run an interactive Lua shell — lua_shell","title":"Run an interactive Lua shell — lua_shell","text":"interactive mode, provides basic read-eval-print loop LuaJIT.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_shell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run an interactive Lua shell — lua_shell","text":"","code":"lua_shell(L = NULL)"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_shell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run an interactive Lua shell — lua_shell","text":"L Lua state run code. NULL (default) uses default Lua state luajr.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_shell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run an interactive Lua shell — lua_shell","text":"None.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_shell.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run an interactive Lua shell — lua_shell","text":"convenience, lines starting equals sign \"=\" replaced \"return \", e.g. entering =x show value x returned R.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/luajr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"luajr: LuaJIT Scripting — luajr-package","title":"luajr: LuaJIT Scripting — luajr-package","text":"'luajr' provides interface LuaJIT, just--time compiler Lua scripting language. allows users run Lua code R.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/luajr-package.html","id":"the-r-api","dir":"Reference","previous_headings":"","what":"The R API","title":"luajr: LuaJIT Scripting — luajr-package","text":"lua(): run Lua code lua_func(): make Lua function callable R lua_shell(): run interactive Lua shell lua_open(): create new Lua state lua_reset(): reset default Lua state lua_parallel(): run Lua code parallel","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/luajr-package.html","id":"further-reading","dir":"Reference","previous_headings":"","what":"Further reading","title":"luajr: LuaJIT Scripting — luajr-package","text":"introduction 'luajr', see vignette(\"luajr\")","code":""},{"path":[]},{"path":"https://nicholasdavies.github.io/luajr/reference/luajr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"luajr: LuaJIT Scripting — luajr-package","text":"Maintainer: Nicholas Davies nicholas.davies@lshtm.ac.uk (ORCID) [copyright holder] contributors: Mike Pall (Author embedded LuaJIT compiler) [copyright holder] Lua.org, PUC-Rio (Authors Lua scripting language) [copyright holder]","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/luajr.html","id":null,"dir":"Reference","previous_headings":"","what":"luajr: LuaJIT Scripting — luajr","title":"luajr: LuaJIT Scripting — luajr","text":"'luajr' provides interface Mike Pall's LuaJIT (https://luajit.org), just--time compiler Lua scripting language (https://www.lua.org). allows users run Lua code R.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/luajr.html","id":"the-r-api","dir":"Reference","previous_headings":"","what":"The R API","title":"luajr: LuaJIT Scripting — luajr","text":"lua(): run Lua code lua_func(): make Lua function callable R lua_shell(): run interactive Lua shell lua_open(): create new Lua state lua_reset(): reset default Lua state","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/luajr.html","id":"further-reading","dir":"Reference","previous_headings":"","what":"Further reading","title":"luajr: LuaJIT Scripting — luajr","text":"introduction 'luajr', see vignette(\"luajr\")","code":""},{"path":"https://nicholasdavies.github.io/luajr/news/index.html","id":"luajr-014","dir":"Changelog","previous_headings":"","what":"luajr 0.1.4","title":"luajr 0.1.4","text":"Added luajr.NULL, allow working NULL Lua. Fixed problems CRAN.","code":""},{"path":"https://nicholasdavies.github.io/luajr/news/index.html","id":"luajr-013","dir":"Changelog","previous_headings":"","what":"luajr 0.1.3","title":"luajr 0.1.3","text":"Added vignette describing luajr Lua module. Added lua_parallel() basic multithreading. Fixed compilation warnings enums platforms.","code":""},{"path":"https://nicholasdavies.github.io/luajr/news/index.html","id":"luajr-012","dir":"Changelog","previous_headings":"","what":"luajr 0.1.2","title":"luajr 0.1.2","text":"CRAN release: 2024-01-27 luajr now CRAN!","code":""}]
