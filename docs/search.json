[{"path":"https://nicholasdavies.github.io/luajr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 luajr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr.html","id":"running-lua-code-lua-and-lua_shell","dir":"Articles","previous_headings":"","what":"Running Lua code: lua() and lua_shell()","title":"Introduction to luajr","text":"get feel luajr run “one-” Lua code R project, use lua() lua_shell(). pass character string lua(), run Lua code: Assignments global variables persist calls lua(): luajr maintains “default Lua state” holds global variables. default Lua state opened first time package function used. can create , separate Lua states, reset default Lua state (see Lua states, ). Assignments local variables persist calls lua(): case, second line returns \"walrus\" local variable my_animal goes scope first call lua() ends, second call lua() referring back global variable my_animal . can include one statement code run lua(): can also use filename argument lua() load run Lua source file, instead running contents string. Call lua_shell() open interactive Lua shell R prompt. can can helpful debugging testing Lua statements.","code":"library(luajr) lua(\"return 'Hello ' .. 'world!'\") #> [1] \"Hello world!\" lua(\"my_animal = 'walrus'\") lua(\"return my_animal\") #> [1] \"walrus\" lua(\"local my_animal = 'donkey'\") lua(\"return my_animal\") #> [1] \"walrus\" lua(\"local my_veg = 'potato'; local my_dish = my_veg .. ' pie'; return my_dish\") #> [1] \"potato pie\""},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr.html","id":"calling-lua-functions-from-r-lua_func","dir":"Articles","previous_headings":"","what":"Calling Lua functions from R: lua_func()","title":"Introduction to luajr","text":"key piece functionality luajr probably lua_func(). allows call Lua functions R. first argument lua_func(), func, string evaluate Lua function. lua_func() returns R function can used call Lua function R. example, can use lua_func() access existing Lua function R: , \"type\" just referring built-Lua function type returns string describing Lua type value passed . can also use lua_func() refer previously defined function default Lua state: can use lua_func() define anonymous Lua function: hood, lua_func() just takes first parameter (string), adds \"return \" front , executes Lua code, registers result function. second argument lua_func(), argcode, also important. argcode determines arguments passed function R translated Lua values use inside function. permissible args codes : 's': simplest Lua type '': array type '1': 's', require argument length 1 … '9': 's', require argument length 9 'v': pass value 'r': pass reference kinds R values can passed Lua functions, behaviour different args codes, summarized following table: , nn stands integer greater 1; examples, stands specifically 2. one character argcode every argument function, string “recycled” arguments passed characters argcode string. , example, just passing \"s\" argcode means parameters passed simplest Lua type, argcode \"sr\", first argument argcode \"s\", second argument argcode \"r\", third argument argcode \"s\", etc.","code":"luatype = lua_func(\"type\") luatype(TRUE) #> [1] \"boolean\" lua(\"function squared(x) return x^2 end\") lua(\"return squared(4)\") #> [1] 16  sq = lua_func(\"squared\") sq(8) #> [1] 64 timestwo = lua_func(\"function(x) return x*2 end\") timestwo(123) #> [1] 246"},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr.html","id":"working-with-lua-states-lua_open-lua_reset","dir":"Articles","previous_headings":"","what":"Working with Lua States: lua_open(), lua_reset()","title":"Introduction to luajr","text":"functions mentioned (lua(), lua_shell(), lua_func()) can also take argument L specifies particular Lua state function operates . L = NULL (default) functions operate default Lua state. can also open alternative Lua states using lua_open(), passing result parameter L, specify function operates specific state. example: lua_close luajr Lua states closed automatically garbage collected R. lua_reset() resets default Lua state: reset non-default Lua state L returned lua_open(), just L = lua_open() . memory previously used L cleaned next garbage collection.","code":"L1 = lua_open() lua(\"a = 2\") lua(\"a = 4\", L = L1) lua(\"return a\") #> [1] 2 lua(\"return a\", L = L1) #> [1] 4 lua(\"a = 2\") lua(\"return a\") #> [1] 2 lua_reset() lua(\"return a\") #> NULL"},{"path":"https://nicholasdavies.github.io/luajr/articles/luajr.html","id":"semi-incomprehensible-notes","dir":"Articles","previous_headings":"","what":"Semi-incomprehensible notes","title":"Introduction to luajr","text":"Note luajr.list() isn’t quite aligned vector types (e.g. luajr.character()), ’s working analogy ’__newindex’ (.e. passing list x function mode 'r' x[1] = \"foo\" doesn’t change underlying list, although x[1][1] = \"foo\" .) general, arguments can expressed lists aren’t ever really passed reference; atomic vector elements reference value. Note logical semantics don’t make huge amount sense Lua due true/false/NA, better explicitly check using built-values luajr.TRUE, luajr.FALSE, luajr.NA. integer, numeric, character NA values, can use luajr.NA_integer_, luajr.NA_real_, luajr.NA_character_.","code":""},{"path":"https://nicholasdavies.github.io/luajr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicholas Davies. Maintainer, author, copyright holder. Mike Pall. Copyright holder.            Author embedded LuaJIT compiler Lua.org, PUC-Rio. Copyright holder.            Authors Lua scripting language","code":""},{"path":"https://nicholasdavies.github.io/luajr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Davies N (2024). luajr: LuaJIT Scripting. https://github.com/nicholasdavies/luajr, https://nicholasdavies.github.io/luajr/.","code":"@Manual{,   title = {luajr: LuaJIT Scripting},   author = {Nicholas Davies},   year = {2024},   note = {https://github.com/nicholasdavies/luajr, https://nicholasdavies.github.io/luajr/}, }"},{"path":"https://nicholasdavies.github.io/luajr/index.html","id":"luajr-luajit-scripting","dir":"","previous_headings":"","what":"LuaJIT Scripting","title":"LuaJIT Scripting","text":"luajr provides R interface Mike Pall’s LuaJIT, just--time compiler Lua scripting language. allows users run Lua code R. One advantages using luajr LuaJIT runs Lua code fast compilation times, fast execution times, need external toolchain, LuaJIT compiler “built ” luajr package. contrasts e.g. Rcpp, results compiled code fast execution times slow compilation times need invoke external C++ compiler toolchain like gcc clang.","code":""},{"path":"https://nicholasdavies.github.io/luajr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"LuaJIT Scripting","text":"can install development version luajr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"nicholasdavies/luajr\")"},{"path":"https://nicholasdavies.github.io/luajr/index.html","id":"under-development","dir":"","previous_headings":"","what":"Under development","title":"LuaJIT Scripting","text":"luajr early development. , yet tested work platforms, interface behaviour package subject change without notice.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Lua code — lua","title":"Run Lua code — lua","text":"Runs specified Lua code.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Lua code — lua","text":"","code":"lua(code, filename = NULL, L = NULL)"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Lua code — lua","text":"code Lua code block run. filename non-NULL, name file run. L Lua state run code. NULL (default) uses default Lua state luajr.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Lua code — lua","text":"Lua value(s) returned code block converted R object(s). subset Lua types can converted R objects present. multiple values returned, packaged list.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Lua code — lua","text":"","code":"twelve <- lua(\"return 3*4\") print(twelve) #> [1] 12"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_func.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a Lua function callable from R — lua_func","title":"Make a Lua function callable from R — lua_func","text":"Takes Lua expression evaluates function provides R function can called invoke Lua function.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a Lua function callable from R — lua_func","text":"","code":"lua_func(func, argcode = \"s\", L = NULL)"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a Lua function callable from R — lua_func","text":"func Lua expression evaluating function. argcode wrap R arguments Lua function. L Lua state run code. NULL (default) uses default Lua state luajr.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_func.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a Lua function callable from R — lua_func","text":"R function can called invoke Lua function.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_func.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a Lua function callable from R — lua_func","text":"R types can passed Lua : NULL, logical vector, integer vector, numeric vector, string vector, list, external pointer. parameter argcode string one character argument Lua function, recycled needed (e.g. single character apply arguments regardless many ). following, corresponding character acode specific argument referred argcode. NULL argument length 0, result Lua nil regardless corresponding argcode. logical, integer, double, character vectors, corresponding argcode 's' (simplify), R vector length one, supplied Lua primitive (boolean, number, number, string, respectively), length > 1, array, .e. table integer indices starting 1. code '', vector always supplied array, even length 1. argcode digit '1' '9', 's', vector required specific length, otherwise error message emitted. Still focusing vectors, argcode 'r', vector passed reference Lua, adopting type luajr.logical_r, luajr.integer_r, luajr.numeric_r, luajr.character_r appropriate. argcode 'v', vector passed value Lua, adopting type luajr.logical, luajr.integer, luajr.numeric, luajr.character appropriate. lists, argcode 's' (simplify), list passed Lua table. entries list non-blank names named table, unnamed entries associated integer key table. Note Lua preserve order entries tables. means R list names often go \"order\" passed Lua 's' returned back R. avoided argcode 'r' 'v'. list passed argcode 'r' 'v', list passed Lua type luajr.list, vector elements list passed reference value, respectively. external pointers, argcode ignored external pointer passed Lua type userdata. function called Lua values returned function, Lua return values converted R values follows. nothing returned, function returns invisible() (.e. NULL). multiple arguments returned, list arguments returned. Reference types (e.g. luajr.logical_r) vector types (e.g. luajr.logical) returned R . luajr.list returned R list. Reference list types respect R attributes set within Lua code. table returned list. list, table entries number key come first (indices 1 n, .e. original number key's value discarded), followed table entries string key (named accordingly). may well scramble order keys, beware. Note particular Lua guarantee traverse table ascending order keys. Entries non-number, non-string keys discarded. probably best avoid returning table anything string keys, use luajr.list.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_func.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a Lua function callable from R — lua_func","text":"","code":"squared <- lua_func(\"function(x) return x^2 end\") print(squared(7)) #> [1] 49"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_open.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new Lua state — lua_open","title":"Create a new Lua state — lua_open","text":"Creates new, empty Lua state returns external pointer wrapping state.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_open.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new Lua state — lua_open","text":"","code":"lua_open()"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_open.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new Lua state — lua_open","text":"External pointer wrapping newly created Lua state.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_open.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a new Lua state — lua_open","text":"Lua code executed within given Lua state. Lua state similar global environment R, variables functions defined. luajr automatically maintains \"default\" Lua state, users luajr need use lua_open(). However, whatever reason want maintain multiple different Lua states time, independent global variables functions, lua_open() can used create new Lua state can passed lua(), lua_func() lua_shell() via L parameter. functions operate within Lua state instead default one. default Lua state can specified explicitly L = NULL. Note currently way (provided luajr) saving Lua state disk state can restarted later. Also, lua_close luajr Lua states closed automatically garbage collected R.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_open.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new Lua state — lua_open","text":"","code":"L1 <- lua_open() lua(\"a = 2\") lua(\"a = 4\", L = L1) lua(\"print(a)\") lua(\"print(a)\", L = L1)"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_reset.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset the default Lua state — lua_reset","title":"Reset the default Lua state — lua_reset","text":"Clears variables default Lua state, freeing associated memory.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_reset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset the default Lua state — lua_reset","text":"","code":"lua_reset()"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_reset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reset the default Lua state — lua_reset","text":"resets default Lua state . reset non-default Lua state L returned lua_open(), just L <- lua_open() . memory previously used cleaned next garbage collection.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_reset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reset the default Lua state — lua_reset","text":"","code":"lua(\"a = 2\") lua_reset() lua(\"print(a)\") # nil"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_shell.html","id":null,"dir":"Reference","previous_headings":"","what":"Run an interactive Lua shell — lua_shell","title":"Run an interactive Lua shell — lua_shell","text":"interactive mode, provides basic read-eval-print loop LuaJIT.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_shell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run an interactive Lua shell — lua_shell","text":"","code":"lua_shell(L = NULL)"},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_shell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run an interactive Lua shell — lua_shell","text":"L Lua state run code. NULL (default) uses default Lua state luajr.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_shell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run an interactive Lua shell — lua_shell","text":"Nothing.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/lua_shell.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run an interactive Lua shell — lua_shell","text":"convenience, lines starting equals sign \"=\" replaced \"return \", e.g. entering =x show value x returned R.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/luajr.html","id":null,"dir":"Reference","previous_headings":"","what":"luajr: LuaJIT Scripting — luajr","title":"luajr: LuaJIT Scripting — luajr","text":"'luajr' provides interface Mike Pall's LuaJIT (https://luajit.org), just--time compiler Lua scripting language (https://www.lua.org). allows users run Lua code R.","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/luajr.html","id":"the-r-api","dir":"Reference","previous_headings":"","what":"The R API","title":"luajr: LuaJIT Scripting — luajr","text":"lua(): run Lua code lua_func(): make Lua function callable R lua_shell(): run interactive Lua shell lua_open(): create new Lua state lua_reset(): reset default Lua state","code":""},{"path":"https://nicholasdavies.github.io/luajr/reference/luajr.html","id":"further-reading","dir":"Reference","previous_headings":"","what":"Further reading","title":"luajr: LuaJIT Scripting — luajr","text":"introduction 'luajr', see vignette(\"luajr\")","code":""}]
