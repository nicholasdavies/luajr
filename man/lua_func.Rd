% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lua_func.R
\name{lua_func}
\alias{lua_func}
\title{Create a Lua function callable from R.}
\usage{
lua_func(code, args = "s", L = NULL)
}
\arguments{
\item{code}{Lua expression evaluating to a function.}

\item{args}{How to wrap R arguments for the Lua function.}

\item{L}{\link[=lua_open]{Lua state} in which to run the code. \code{NULL}
(default) to use the default Lua state for \pkg{luajr}.}
}
\value{
An R function.
}
\description{
More documentation to follow.
}
\details{
The R types that can be passed to Lua are: \code{NULL}, logical vector,
integer vector, numeric vector, string vector, list, and external pointer.

The parameter \code{args} is a string with one character for each
argument passed to the Lua function, recycled as needed.

For \code{NULL} or any argument with length 0, the result in Lua is
\strong{nil} regardless of the corresponding \code{args} code.

For logical, integer, double, and character vectors, if the corresponding
\code{args} code is \code{'s'} (simplify), then if the R vector has length
one, it is supplied as a Lua primitive (boolean, number, number, or string,
respectively), and if length > 1, as a table. If the code is \code{'a'}, the
vector is supplied as an array (table with integer indices) for any length
>= 1, discarding names. If \code{'t'}, the vector is supplied as a table for
any length >= 1, with or without names depending on the R object.

For lists, the Lua object will always be either \strong{nil} (if length 0) or
a table (i.e. it is not simplified to a scalar if there is only one entry in
the list), but the \code{args} code can be \code{'s'}, \code{'a'}, or
\code{'t'}, which is applied to all elements contained in the list (including
other lists).

Note that Lua does not preserve the order of entries in lists. This means
that an R vector with names will often go out of order when passed into
Lua. A warning is therefore emitted when a named list or vector gets passed
in to Lua.

For external pointers, the \code{args} code is ignored and the external
pointer is passed to Lua as type \emph{userdata}.

Attributes are ignored other than 'names' and 'class', so e.g. matrices will
end up as a numeric vector.
}
\examples{
squared = lua_func("function(x) return x^2 end")
print(squared(7))
}
